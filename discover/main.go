package main

import (
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"log"
	"net/http"
	"os"
	"text/template"
	"unicode"
)

const (
	raw = "https://raw.githubusercontent.com/gonet2/libs/master/services/services.go"
)

func main() {
	if len(os.Args) <= 1 {
		return
	}
	resp, err := http.Get(raw)
	if err != nil {
		log.Fatal(err)
	}
	// parser
	fset := token.NewFileSet()
	f, err := parser.ParseFile(fset, "", resp.Body, 0)
	if err != nil {
		log.Fatal(err)
	}

	// remove Init()
LOOP:
	for k := range f.Decls {
		switch f.Decls[k].(type) {
		case *ast.FuncDecl:
			decl := f.Decls[k].(*ast.FuncDecl)
			if decl.Name.Name == "Init" {
				f.Decls = append(f.Decls[:k], f.Decls[k+1:]...)
				break LOOP
			}
		}
	}

	// create file
	out, err := os.Create("services.go")
	if err != nil {
		log.Fatal(err)
	}

	// rewrite
	format.Node(out, fset, f)

	//add stub
	funcMap := template.FuncMap{
		"Name": func(s string) string {
			a := []rune(s)
			a[0] = unicode.ToUpper(a[0])
			return string(a)
		},
	}
	tmpl, err := template.New("proto.tmpl").Funcs(funcMap).Parse(t)
	if err != nil {
		log.Fatal(err)
	}
	err = tmpl.Execute(out, os.Args[1:])
	if err != nil {
		log.Fatal(err)
	}
}

var t = `
// stubs generated by discover
// DO NOT EDIT!!!
{{range .}}
func Get{{Name .}}WithId(id string) *grpc.ClientConn {
	return _default_pool.get_service_with_id(DEFAULT_SERVICE_PATH + "/{{.}}", id)
}
{{end}}
{{range .}}
func Get{{Name .}}() *grpc.ClientConn {
	return _default_pool.get_service(DEFAULT_SERVICE_PATH + "/{{.}}")
}
{{end}}

func Init() {
	var names []string
	{{range .}}names = append(names, "{{.}}"){{end}}
	_default_pool.init(names...)
}
`
