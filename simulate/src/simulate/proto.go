// Code generated by gen_proto.sh.
// DO NOT EDIT!
package main

import "misc/packet"

type null_struct struct {
}

func (p null_struct) Pack(w *packet.Packet) {
}

func PKT_null_struct(reader *packet.Packet) (tbl null_struct, err error) {
	return
}

type byte_id struct {
	F_id uint8
}

func (p byte_id) Pack(w *packet.Packet) {
	w.WriteByte(p.F_id)
}

func PKT_byte_id(reader *packet.Packet) (tbl byte_id, err error) {
	tbl.F_id, err = reader.ReadByte()
	checkErr(err)

	return
}

type auto_id struct {
	F_id int32
}

func (p auto_id) Pack(w *packet.Packet) {
	w.WriteS32(p.F_id)
}

func PKT_auto_id(reader *packet.Packet) (tbl auto_id, err error) {
	tbl.F_id, err = reader.ReadS32()
	checkErr(err)

	return
}

type entity_id struct {
	F_id uint64
}

func (p entity_id) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
}

func PKT_entity_id(reader *packet.Packet) (tbl entity_id, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	return
}

type item_id struct {
	F_id uint32
}

func (p item_id) Pack(w *packet.Packet) {
	w.WriteU32(p.F_id)
}

func PKT_item_id(reader *packet.Packet) (tbl item_id, err error) {
	tbl.F_id, err = reader.ReadU32()
	checkErr(err)

	return
}

type token_login_info struct {
	F_token string
}

func (p token_login_info) Pack(w *packet.Packet) {
	w.WriteString(p.F_token)
}

func PKT_token_login_info(reader *packet.Packet) (tbl token_login_info, err error) {
	tbl.F_token, err = reader.ReadString()
	checkErr(err)

	return
}

type server_status struct {
	F_status uint8
}

func (p server_status) Pack(w *packet.Packet) {
	w.WriteByte(p.F_status)
}

func PKT_server_status(reader *packet.Packet) (tbl server_status, err error) {
	tbl.F_status, err = reader.ReadByte()
	checkErr(err)

	return
}

type token_login_return struct {
	F_ok bool
}

func (p token_login_return) Pack(w *packet.Packet) {
	w.WriteBool(p.F_ok)
}

func PKT_token_login_return(reader *packet.Packet) (tbl token_login_return, err error) {
	tbl.F_ok, err = reader.ReadBool()
	checkErr(err)

	return
}

type quick_login_info struct {
	F_token string
	F_uid   string
	F_name  string
}

func (p quick_login_info) Pack(w *packet.Packet) {
	w.WriteString(p.F_token)
	w.WriteString(p.F_uid)
	w.WriteString(p.F_name)
}

func PKT_quick_login_info(reader *packet.Packet) (tbl quick_login_info, err error) {
	tbl.F_token, err = reader.ReadString()
	checkErr(err)

	tbl.F_uid, err = reader.ReadString()
	checkErr(err)

	tbl.F_name, err = reader.ReadString()
	checkErr(err)

	return
}

type quick_ios_login_info struct {
	F_token string
	F_uid   string
}

func (p quick_ios_login_info) Pack(w *packet.Packet) {
	w.WriteString(p.F_token)
	w.WriteString(p.F_uid)
}

func PKT_quick_ios_login_info(reader *packet.Packet) (tbl quick_ios_login_info, err error) {
	tbl.F_token, err = reader.ReadString()
	checkErr(err)

	tbl.F_uid, err = reader.ReadString()
	checkErr(err)

	return
}

type error_info struct {
	F_code int32
	F_msg  string
}

func (p error_info) Pack(w *packet.Packet) {
	w.WriteS32(p.F_code)
	w.WriteString(p.F_msg)
}

func PKT_error_info(reader *packet.Packet) (tbl error_info, err error) {
	tbl.F_code, err = reader.ReadS32()
	checkErr(err)

	tbl.F_msg, err = reader.ReadString()
	checkErr(err)

	return
}

type error_index struct {
	F_code int32
}

func (p error_index) Pack(w *packet.Packet) {
	w.WriteS32(p.F_code)
}

func PKT_error_index(reader *packet.Packet) (tbl error_index, err error) {
	tbl.F_code, err = reader.ReadS32()
	checkErr(err)

	return
}

type user_login_info struct {
	F_userName string
	F_userPass string
	F_language string
	F_channel  string
	F_token    string
	F_device   string
}

func (p user_login_info) Pack(w *packet.Packet) {
	w.WriteString(p.F_userName)
	w.WriteString(p.F_userPass)
	w.WriteString(p.F_language)
	w.WriteString(p.F_channel)
	w.WriteString(p.F_token)
	w.WriteString(p.F_device)
}

func PKT_user_login_info(reader *packet.Packet) (tbl user_login_info, err error) {
	tbl.F_userName, err = reader.ReadString()
	checkErr(err)

	tbl.F_userPass, err = reader.ReadString()
	checkErr(err)

	tbl.F_language, err = reader.ReadString()
	checkErr(err)

	tbl.F_channel, err = reader.ReadString()
	checkErr(err)

	tbl.F_token, err = reader.ReadString()
	checkErr(err)

	tbl.F_device, err = reader.ReadString()
	checkErr(err)

	return
}

type jiazi_use_login_info struct {
	F_gameToken string
	F_visitor   bool
	F_userName  string
}

func (p jiazi_use_login_info) Pack(w *packet.Packet) {
	w.WriteString(p.F_gameToken)
	w.WriteBool(p.F_visitor)
	w.WriteString(p.F_userName)
}

func PKT_jiazi_use_login_info(reader *packet.Packet) (tbl jiazi_use_login_info, err error) {
	tbl.F_gameToken, err = reader.ReadString()
	checkErr(err)

	tbl.F_visitor, err = reader.ReadBool()
	checkErr(err)

	tbl.F_userName, err = reader.ReadString()
	checkErr(err)

	return
}

type test_login_info struct {
	F_channel string
	F_Number  int32
}

func (p test_login_info) Pack(w *packet.Packet) {
	w.WriteString(p.F_channel)
	w.WriteS32(p.F_Number)
}

func PKT_test_login_info(reader *packet.Packet) (tbl test_login_info, err error) {
	tbl.F_channel, err = reader.ReadString()
	checkErr(err)

	tbl.F_Number, err = reader.ReadS32()
	checkErr(err)

	return
}

type user_reg_info struct {
	F_nickname string
	F_headIcon uint32
}

func (p user_reg_info) Pack(w *packet.Packet) {
	w.WriteString(p.F_nickname)
	w.WriteU32(p.F_headIcon)
}

func PKT_user_reg_info(reader *packet.Packet) (tbl user_reg_info, err error) {
	tbl.F_nickname, err = reader.ReadString()
	checkErr(err)

	tbl.F_headIcon, err = reader.ReadU32()
	checkErr(err)

	return
}

type auto_reg_data struct {
	F_userName string
	F_userPass string
}

func (p auto_reg_data) Pack(w *packet.Packet) {
	w.WriteString(p.F_userName)
	w.WriteString(p.F_userPass)
}

func PKT_auto_reg_data(reader *packet.Packet) (tbl auto_reg_data, err error) {
	tbl.F_userName, err = reader.ReadString()
	checkErr(err)

	tbl.F_userPass, err = reader.ReadString()
	checkErr(err)

	return
}

type seed_info struct {
	F_client_send_seed    int32
	F_client_receive_seed int32
}

func (p seed_info) Pack(w *packet.Packet) {
	w.WriteS32(p.F_client_send_seed)
	w.WriteS32(p.F_client_receive_seed)
}

func PKT_seed_info(reader *packet.Packet) (tbl seed_info, err error) {
	tbl.F_client_send_seed, err = reader.ReadS32()
	checkErr(err)

	tbl.F_client_receive_seed, err = reader.ReadS32()
	checkErr(err)

	return
}

type user_snapshot struct {
	F_uid   string
	F_token string
}

func (p user_snapshot) Pack(w *packet.Packet) {
	w.WriteString(p.F_uid)
	w.WriteString(p.F_token)
}

func PKT_user_snapshot(reader *packet.Packet) (tbl user_snapshot, err error) {
	tbl.F_uid, err = reader.ReadString()
	checkErr(err)

	tbl.F_token, err = reader.ReadString()
	checkErr(err)

	return
}

type check_in_info struct {
	F_checkInDays               []uint16
	F_accumulatedcheckInSatatus []uint8
}

func (p check_in_info) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_checkInDays)))
	for k := range p.F_checkInDays {
		w.WriteU16(p.F_checkInDays[k])
	}
	w.WriteU16(uint16(len(p.F_accumulatedcheckInSatatus)))
	for k := range p.F_accumulatedcheckInSatatus {
		w.WriteByte(p.F_accumulatedcheckInSatatus[k])
	}
}

func PKT_check_in_info(reader *packet.Packet) (tbl check_in_info, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadU16()
			tbl.F_checkInDays = append(tbl.F_checkInDays, v)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadByte()
			tbl.F_accumulatedcheckInSatatus = append(tbl.F_accumulatedcheckInSatatus, v)
			checkErr(err)
		}
	}

	return
}

type user_info struct {
	F_basic         basic_info
	F_res           res_info
	F_constructions []construction_info
	F_warships      []warship_info
	F_gift          []gift_info
	F_teams         []team_info
	F_items         []item_info
	F_missions      []mission_info
	F_accessories   []accessories_info
	F_check_info    check_in_info
	F_pvpbase       pvp_base_info
	F_weapon_info   []newWeapon_info
	F_weapondevexp  []weapon_dev_exp
	F_shopInfos     shop_infos
	F_slot          slot_info
	F_dormgift      []dormgift_info
}

func (p user_info) Pack(w *packet.Packet) {
	p.F_basic.Pack(w)
	p.F_res.Pack(w)
	w.WriteU16(uint16(len(p.F_constructions)))
	for k := range p.F_constructions {
		p.F_constructions[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_warships)))
	for k := range p.F_warships {
		p.F_warships[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_gift)))
	for k := range p.F_gift {
		p.F_gift[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_teams)))
	for k := range p.F_teams {
		p.F_teams[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_items)))
	for k := range p.F_items {
		p.F_items[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_missions)))
	for k := range p.F_missions {
		p.F_missions[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_accessories)))
	for k := range p.F_accessories {
		p.F_accessories[k].Pack(w)
	}
	p.F_check_info.Pack(w)
	p.F_pvpbase.Pack(w)
	w.WriteU16(uint16(len(p.F_weapon_info)))
	for k := range p.F_weapon_info {
		p.F_weapon_info[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_weapondevexp)))
	for k := range p.F_weapondevexp {
		p.F_weapondevexp[k].Pack(w)
	}
	p.F_shopInfos.Pack(w)
	p.F_slot.Pack(w)
	w.WriteU16(uint16(len(p.F_dormgift)))
	for k := range p.F_dormgift {
		p.F_dormgift[k].Pack(w)
	}
}

func PKT_user_info(reader *packet.Packet) (tbl user_info, err error) {
	tbl.F_basic, err = PKT_basic_info(reader)
	checkErr(err)

	tbl.F_res, err = PKT_res_info(reader)
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_constructions = make([]construction_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_constructions[i], err = PKT_construction_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_warships = make([]warship_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_warships[i], err = PKT_warship_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_gift = make([]gift_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_gift[i], err = PKT_gift_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_teams = make([]team_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_teams[i], err = PKT_team_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_items = make([]item_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_items[i], err = PKT_item_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_missions = make([]mission_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_missions[i], err = PKT_mission_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_accessories = make([]accessories_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_accessories[i], err = PKT_accessories_info(reader)
			checkErr(err)
		}
	}

	tbl.F_check_info, err = PKT_check_in_info(reader)
	checkErr(err)

	tbl.F_pvpbase, err = PKT_pvp_base_info(reader)
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_weapon_info = make([]newWeapon_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_weapon_info[i], err = PKT_newWeapon_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_weapondevexp = make([]weapon_dev_exp, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_weapondevexp[i], err = PKT_weapon_dev_exp(reader)
			checkErr(err)
		}
	}

	tbl.F_shopInfos, err = PKT_shop_infos(reader)
	checkErr(err)

	tbl.F_slot, err = PKT_slot_info(reader)
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_dormgift = make([]dormgift_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_dormgift[i], err = PKT_dormgift_info(reader)
			checkErr(err)
		}
	}

	return
}

type slot_info struct {
	F_shipslotnum   uint8
	F_repairslotnum uint8
	F_fitslotnum    uint8
	F_shipCap       uint32
	F_dormRoomnum   uint8
}

func (p slot_info) Pack(w *packet.Packet) {
	w.WriteByte(p.F_shipslotnum)
	w.WriteByte(p.F_repairslotnum)
	w.WriteByte(p.F_fitslotnum)
	w.WriteU32(p.F_shipCap)
	w.WriteByte(p.F_dormRoomnum)
}

func PKT_slot_info(reader *packet.Packet) (tbl slot_info, err error) {
	tbl.F_shipslotnum, err = reader.ReadByte()
	checkErr(err)

	tbl.F_repairslotnum, err = reader.ReadByte()
	checkErr(err)

	tbl.F_fitslotnum, err = reader.ReadByte()
	checkErr(err)

	tbl.F_shipCap, err = reader.ReadU32()
	checkErr(err)

	tbl.F_dormRoomnum, err = reader.ReadByte()
	checkErr(err)

	return
}

type slot_item_info struct {
	F_num     slot_info
	F_diamond res_change
}

func (p slot_item_info) Pack(w *packet.Packet) {
	p.F_num.Pack(w)
	p.F_diamond.Pack(w)
}

func PKT_slot_item_info(reader *packet.Packet) (tbl slot_item_info, err error) {
	tbl.F_num, err = PKT_slot_info(reader)
	checkErr(err)

	tbl.F_diamond, err = PKT_res_change(reader)
	checkErr(err)

	return
}

type basic_info struct {
	F_id                uint64
	F_nickName          string
	F_headIcon          uint32
	F_newbie            uint16
	F_createTime        int64
	F_goldCap           uint32
	F_fuelCap           uint32
	F_materialCap       uint32
	F_guide_node        uint32
	F_keeponline        uint8
	F_playerRiseLevel   int32
	F_playerRiseExp     int32
	F_pickingStatus     []shipbookstatusinfo
	F_shiphandbook      []int32
	F_defaultRoom       uint8
	F_baseRating        int32
	F_nPvPTicket        int32
	F_nPvPTicketRestore int64
	F_rank              int32
	F_nPvPTimes         int32
	F_attackedTime      int64
	F_creatPlayerTime   int64
}

func (p basic_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	w.WriteString(p.F_nickName)
	w.WriteU32(p.F_headIcon)
	w.WriteU16(p.F_newbie)
	w.WriteS64(p.F_createTime)
	w.WriteU32(p.F_goldCap)
	w.WriteU32(p.F_fuelCap)
	w.WriteU32(p.F_materialCap)
	w.WriteU32(p.F_guide_node)
	w.WriteByte(p.F_keeponline)
	w.WriteS32(p.F_playerRiseLevel)
	w.WriteS32(p.F_playerRiseExp)
	w.WriteU16(uint16(len(p.F_pickingStatus)))
	for k := range p.F_pickingStatus {
		p.F_pickingStatus[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_shiphandbook)))
	for k := range p.F_shiphandbook {
		w.WriteS32(p.F_shiphandbook[k])
	}
	w.WriteByte(p.F_defaultRoom)
	w.WriteS32(p.F_baseRating)
	w.WriteS32(p.F_nPvPTicket)
	w.WriteS64(p.F_nPvPTicketRestore)
	w.WriteS32(p.F_rank)
	w.WriteS32(p.F_nPvPTimes)
	w.WriteS64(p.F_attackedTime)
	w.WriteS64(p.F_creatPlayerTime)
}

func PKT_basic_info(reader *packet.Packet) (tbl basic_info, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_nickName, err = reader.ReadString()
	checkErr(err)

	tbl.F_headIcon, err = reader.ReadU32()
	checkErr(err)

	tbl.F_newbie, err = reader.ReadU16()
	checkErr(err)

	tbl.F_createTime, err = reader.ReadS64()
	checkErr(err)

	tbl.F_goldCap, err = reader.ReadU32()
	checkErr(err)

	tbl.F_fuelCap, err = reader.ReadU32()
	checkErr(err)

	tbl.F_materialCap, err = reader.ReadU32()
	checkErr(err)

	tbl.F_guide_node, err = reader.ReadU32()
	checkErr(err)

	tbl.F_keeponline, err = reader.ReadByte()
	checkErr(err)

	tbl.F_playerRiseLevel, err = reader.ReadS32()
	checkErr(err)

	tbl.F_playerRiseExp, err = reader.ReadS32()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_pickingStatus = make([]shipbookstatusinfo, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_pickingStatus[i], err = PKT_shipbookstatusinfo(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadS32()
			tbl.F_shiphandbook = append(tbl.F_shiphandbook, v)
			checkErr(err)
		}
	}

	tbl.F_defaultRoom, err = reader.ReadByte()
	checkErr(err)

	tbl.F_baseRating, err = reader.ReadS32()
	checkErr(err)

	tbl.F_nPvPTicket, err = reader.ReadS32()
	checkErr(err)

	tbl.F_nPvPTicketRestore, err = reader.ReadS64()
	checkErr(err)

	tbl.F_rank, err = reader.ReadS32()
	checkErr(err)

	tbl.F_nPvPTimes, err = reader.ReadS32()
	checkErr(err)

	tbl.F_attackedTime, err = reader.ReadS64()
	checkErr(err)

	tbl.F_creatPlayerTime, err = reader.ReadS64()
	checkErr(err)

	return
}

type res_info struct {
	F_gold              int32
	F_fuel              int32
	F_material          int32
	F_parts             int32
	F_diamond           int32
	F_skillpoint        int32
	F_ticket            int32
	F_weaponpoint       int32
	F_acsevolutionpoint int32
	F_arc               int32
	F_merit             int32
}

func (p res_info) Pack(w *packet.Packet) {
	w.WriteS32(p.F_gold)
	w.WriteS32(p.F_fuel)
	w.WriteS32(p.F_material)
	w.WriteS32(p.F_parts)
	w.WriteS32(p.F_diamond)
	w.WriteS32(p.F_skillpoint)
	w.WriteS32(p.F_ticket)
	w.WriteS32(p.F_weaponpoint)
	w.WriteS32(p.F_acsevolutionpoint)
	w.WriteS32(p.F_arc)
	w.WriteS32(p.F_merit)
}

func PKT_res_info(reader *packet.Packet) (tbl res_info, err error) {
	tbl.F_gold, err = reader.ReadS32()
	checkErr(err)

	tbl.F_fuel, err = reader.ReadS32()
	checkErr(err)

	tbl.F_material, err = reader.ReadS32()
	checkErr(err)

	tbl.F_parts, err = reader.ReadS32()
	checkErr(err)

	tbl.F_diamond, err = reader.ReadS32()
	checkErr(err)

	tbl.F_skillpoint, err = reader.ReadS32()
	checkErr(err)

	tbl.F_ticket, err = reader.ReadS32()
	checkErr(err)

	tbl.F_weaponpoint, err = reader.ReadS32()
	checkErr(err)

	tbl.F_acsevolutionpoint, err = reader.ReadS32()
	checkErr(err)

	tbl.F_arc, err = reader.ReadS32()
	checkErr(err)

	tbl.F_merit, err = reader.ReadS32()
	checkErr(err)

	return
}

type construction_build_info struct {
	F_tid uint16
	F_x   uint16
	F_y   uint16
}

func (p construction_build_info) Pack(w *packet.Packet) {
	w.WriteU16(p.F_tid)
	w.WriteU16(p.F_x)
	w.WriteU16(p.F_y)
}

func PKT_construction_build_info(reader *packet.Packet) (tbl construction_build_info, err error) {
	tbl.F_tid, err = reader.ReadU16()
	checkErr(err)

	tbl.F_x, err = reader.ReadU16()
	checkErr(err)

	tbl.F_y, err = reader.ReadU16()
	checkErr(err)

	return
}

type construction_info struct {
	F_constructionId          uint64
	F_constructionTid         uint16
	F_constructionLv          uint8
	F_constructionX           uint16
	F_constructionY           uint16
	F_constructionStoreRes    uint32
	F_constructionUpgradeTime uint32
	F_constructionBuildTime   uint32
	F_constructionRequireTime uint32
	F_supTime                 int64
	F_constructionHp          int32
	F_constructionMaxHp       int32
}

func (p construction_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_constructionId)
	w.WriteU16(p.F_constructionTid)
	w.WriteByte(p.F_constructionLv)
	w.WriteU16(p.F_constructionX)
	w.WriteU16(p.F_constructionY)
	w.WriteU32(p.F_constructionStoreRes)
	w.WriteU32(p.F_constructionUpgradeTime)
	w.WriteU32(p.F_constructionBuildTime)
	w.WriteU32(p.F_constructionRequireTime)
	w.WriteS64(p.F_supTime)
	w.WriteS32(p.F_constructionHp)
	w.WriteS32(p.F_constructionMaxHp)
}

func PKT_construction_info(reader *packet.Packet) (tbl construction_info, err error) {
	tbl.F_constructionId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_constructionTid, err = reader.ReadU16()
	checkErr(err)

	tbl.F_constructionLv, err = reader.ReadByte()
	checkErr(err)

	tbl.F_constructionX, err = reader.ReadU16()
	checkErr(err)

	tbl.F_constructionY, err = reader.ReadU16()
	checkErr(err)

	tbl.F_constructionStoreRes, err = reader.ReadU32()
	checkErr(err)

	tbl.F_constructionUpgradeTime, err = reader.ReadU32()
	checkErr(err)

	tbl.F_constructionBuildTime, err = reader.ReadU32()
	checkErr(err)

	tbl.F_constructionRequireTime, err = reader.ReadU32()
	checkErr(err)

	tbl.F_supTime, err = reader.ReadS64()
	checkErr(err)

	tbl.F_constructionHp, err = reader.ReadS32()
	checkErr(err)

	tbl.F_constructionMaxHp, err = reader.ReadS32()
	checkErr(err)

	return
}

type all_construction_info struct {
	F_allconstrutionInof []construction_info
}

func (p all_construction_info) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_allconstrutionInof)))
	for k := range p.F_allconstrutionInof {
		p.F_allconstrutionInof[k].Pack(w)
	}
}

func PKT_all_construction_info(reader *packet.Packet) (tbl all_construction_info, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_allconstrutionInof = make([]construction_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_allconstrutionInof[i], err = PKT_construction_info(reader)
			checkErr(err)
		}
	}

	return
}

type warship_info struct {
	F_warshipId           uint64
	F_warshipTid          int32
	F_warshipExp          int32
	F_warshipDurability   int32
	F_warshipSupply       int32
	F_warshipEvolutionExp float32
	F_warshipAwakenTime   int64
	F_warshipRepairTime   int64
	F_warshipBuildTime    int64
	F_warshipSKillTime    int64
	F_warshipIdSkillUp    uint32
	F_warshipWeapons      []newWeapon_info
	F_warshipAccessories  []shipAccessories
	F_skill_infos         []skill_info
	F_warship_lock        bool
	F_goods               uint32
	F_fuel                uint32
	F_shipAcsSlotLv       []slotlv_info
	F_isExpedition        bool
	F_shipFavorite        float32
	F_conditionStatus     []bool
	F_favStatus           bool
	F_energyRestoreTime   int64
	F_shipEnergy          uint32
}

func (p warship_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_warshipId)
	w.WriteS32(p.F_warshipTid)
	w.WriteS32(p.F_warshipExp)
	w.WriteS32(p.F_warshipDurability)
	w.WriteS32(p.F_warshipSupply)
	w.WriteFloat32(p.F_warshipEvolutionExp)
	w.WriteS64(p.F_warshipAwakenTime)
	w.WriteS64(p.F_warshipRepairTime)
	w.WriteS64(p.F_warshipBuildTime)
	w.WriteS64(p.F_warshipSKillTime)
	w.WriteU32(p.F_warshipIdSkillUp)
	w.WriteU16(uint16(len(p.F_warshipWeapons)))
	for k := range p.F_warshipWeapons {
		p.F_warshipWeapons[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_warshipAccessories)))
	for k := range p.F_warshipAccessories {
		p.F_warshipAccessories[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_skill_infos)))
	for k := range p.F_skill_infos {
		p.F_skill_infos[k].Pack(w)
	}
	w.WriteBool(p.F_warship_lock)
	w.WriteU32(p.F_goods)
	w.WriteU32(p.F_fuel)
	w.WriteU16(uint16(len(p.F_shipAcsSlotLv)))
	for k := range p.F_shipAcsSlotLv {
		p.F_shipAcsSlotLv[k].Pack(w)
	}
	w.WriteBool(p.F_isExpedition)
	w.WriteFloat32(p.F_shipFavorite)
	w.WriteU16(uint16(len(p.F_conditionStatus)))
	for k := range p.F_conditionStatus {
		w.WriteBool(p.F_conditionStatus[k])
	}
	w.WriteBool(p.F_favStatus)
	w.WriteS64(p.F_energyRestoreTime)
	w.WriteU32(p.F_shipEnergy)
}

func PKT_warship_info(reader *packet.Packet) (tbl warship_info, err error) {
	tbl.F_warshipId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_warshipTid, err = reader.ReadS32()
	checkErr(err)

	tbl.F_warshipExp, err = reader.ReadS32()
	checkErr(err)

	tbl.F_warshipDurability, err = reader.ReadS32()
	checkErr(err)

	tbl.F_warshipSupply, err = reader.ReadS32()
	checkErr(err)

	tbl.F_warshipEvolutionExp, err = reader.ReadFloat32()
	checkErr(err)

	tbl.F_warshipAwakenTime, err = reader.ReadS64()
	checkErr(err)

	tbl.F_warshipRepairTime, err = reader.ReadS64()
	checkErr(err)

	tbl.F_warshipBuildTime, err = reader.ReadS64()
	checkErr(err)

	tbl.F_warshipSKillTime, err = reader.ReadS64()
	checkErr(err)

	tbl.F_warshipIdSkillUp, err = reader.ReadU32()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_warshipWeapons = make([]newWeapon_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_warshipWeapons[i], err = PKT_newWeapon_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_warshipAccessories = make([]shipAccessories, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_warshipAccessories[i], err = PKT_shipAccessories(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_skill_infos = make([]skill_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_skill_infos[i], err = PKT_skill_info(reader)
			checkErr(err)
		}
	}

	tbl.F_warship_lock, err = reader.ReadBool()
	checkErr(err)

	tbl.F_goods, err = reader.ReadU32()
	checkErr(err)

	tbl.F_fuel, err = reader.ReadU32()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_shipAcsSlotLv = make([]slotlv_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_shipAcsSlotLv[i], err = PKT_slotlv_info(reader)
			checkErr(err)
		}
	}

	tbl.F_isExpedition, err = reader.ReadBool()
	checkErr(err)

	tbl.F_shipFavorite, err = reader.ReadFloat32()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadBool()
			tbl.F_conditionStatus = append(tbl.F_conditionStatus, v)
			checkErr(err)
		}
	}

	tbl.F_favStatus, err = reader.ReadBool()
	checkErr(err)

	tbl.F_energyRestoreTime, err = reader.ReadS64()
	checkErr(err)

	tbl.F_shipEnergy, err = reader.ReadU32()
	checkErr(err)

	return
}

type slotlv_info struct {
	F_pos    uint16
	F_slotlv uint8
}

func (p slotlv_info) Pack(w *packet.Packet) {
	w.WriteU16(p.F_pos)
	w.WriteByte(p.F_slotlv)
}

func PKT_slotlv_info(reader *packet.Packet) (tbl slotlv_info, err error) {
	tbl.F_pos, err = reader.ReadU16()
	checkErr(err)

	tbl.F_slotlv, err = reader.ReadByte()
	checkErr(err)

	return
}

type skill_info struct {
	F_skillId uint32
	F_skillLv uint8
}

func (p skill_info) Pack(w *packet.Packet) {
	w.WriteU32(p.F_skillId)
	w.WriteByte(p.F_skillLv)
}

func PKT_skill_info(reader *packet.Packet) (tbl skill_info, err error) {
	tbl.F_skillId, err = reader.ReadU32()
	checkErr(err)

	tbl.F_skillLv, err = reader.ReadByte()
	checkErr(err)

	return
}

type shipWeapon struct {
	F_weaponid  uint64
	F_weapontid uint32
}

func (p shipWeapon) Pack(w *packet.Packet) {
	w.WriteU64(p.F_weaponid)
	w.WriteU32(p.F_weapontid)
}

func PKT_shipWeapon(reader *packet.Packet) (tbl shipWeapon, err error) {
	tbl.F_weaponid, err = reader.ReadU64()
	checkErr(err)

	tbl.F_weapontid, err = reader.ReadU32()
	checkErr(err)

	return
}

type shipAccessories struct {
	F_pos    uint16
	F_acs_id uint64
}

func (p shipAccessories) Pack(w *packet.Packet) {
	w.WriteU16(p.F_pos)
	w.WriteU64(p.F_acs_id)
}

func PKT_shipAccessories(reader *packet.Packet) (tbl shipAccessories, err error) {
	tbl.F_pos, err = reader.ReadU16()
	checkErr(err)

	tbl.F_acs_id, err = reader.ReadU64()
	checkErr(err)

	return
}

type construction_succeed_info struct {
	F_itemchange   item_change_info
	F_construction construction_info
}

func (p construction_succeed_info) Pack(w *packet.Packet) {
	p.F_itemchange.Pack(w)
	p.F_construction.Pack(w)
}

func PKT_construction_succeed_info(reader *packet.Packet) (tbl construction_succeed_info, err error) {
	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	tbl.F_construction, err = PKT_construction_info(reader)
	checkErr(err)

	return
}

type construction_id_info struct {
	F_id uint64
}

func (p construction_id_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
}

func PKT_construction_id_info(reader *packet.Packet) (tbl construction_id_info, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	return
}

type construction_move_info struct {
	F_id uint64
	F_x  uint16
	F_y  uint16
}

func (p construction_move_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	w.WriteU16(p.F_x)
	w.WriteU16(p.F_y)
}

func PKT_construction_move_info(reader *packet.Packet) (tbl construction_move_info, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_x, err = reader.ReadU16()
	checkErr(err)

	tbl.F_y, err = reader.ReadU16()
	checkErr(err)

	return
}

type construction_destroy_info struct {
	F_id         uint64
	F_itemchange item_change_info
}

func (p construction_destroy_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	p.F_itemchange.Pack(w)
}

func PKT_construction_destroy_info(reader *packet.Packet) (tbl construction_destroy_info, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	return
}

type warship_evolution_info struct {
	F_id   uint64
	F_type []uint64
}

func (p warship_evolution_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	w.WriteU16(uint16(len(p.F_type)))
	for k := range p.F_type {
		w.WriteU64(p.F_type[k])
	}
}

func PKT_warship_evolution_info(reader *packet.Packet) (tbl warship_evolution_info, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadU64()
			tbl.F_type = append(tbl.F_type, v)
			checkErr(err)
		}
	}

	return
}

type warship_clearcd_info struct {
	F_id   uint64
	F_type uint8
}

func (p warship_clearcd_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	w.WriteByte(p.F_type)
}

func PKT_warship_clearcd_info(reader *packet.Packet) (tbl warship_clearcd_info, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_type, err = reader.ReadByte()
	checkErr(err)

	return
}

type warship_change_succeed struct {
	F_itemchange item_change_info
	F_warship    warship_info
}

func (p warship_change_succeed) Pack(w *packet.Packet) {
	p.F_itemchange.Pack(w)
	p.F_warship.Pack(w)
}

func PKT_warship_change_succeed(reader *packet.Packet) (tbl warship_change_succeed, err error) {
	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	tbl.F_warship, err = PKT_warship_info(reader)
	checkErr(err)

	return
}

type room_data struct {
	F_pos        uint8
	F_id         uint64
	F_isLearning bool
}

func (p room_data) Pack(w *packet.Packet) {
	w.WriteByte(p.F_pos)
	w.WriteU64(p.F_id)
	w.WriteBool(p.F_isLearning)
}

func PKT_room_data(reader *packet.Packet) (tbl room_data, err error) {
	tbl.F_pos, err = reader.ReadByte()
	checkErr(err)

	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_isLearning, err = reader.ReadBool()
	checkErr(err)

	return
}

type curriculum struct {
	F_pos       uint8
	F_id        uint16
	F_isLearned bool
}

func (p curriculum) Pack(w *packet.Packet) {
	w.WriteByte(p.F_pos)
	w.WriteU16(p.F_id)
	w.WriteBool(p.F_isLearned)
}

func PKT_curriculum(reader *packet.Packet) (tbl curriculum, err error) {
	tbl.F_pos, err = reader.ReadByte()
	checkErr(err)

	tbl.F_id, err = reader.ReadU16()
	checkErr(err)

	tbl.F_isLearned, err = reader.ReadBool()
	checkErr(err)

	return
}

type classroom_info struct {
	F_encounter   int32
	F_roles       []room_data
	F_curriculums []curriculum
}

func (p classroom_info) Pack(w *packet.Packet) {
	w.WriteS32(p.F_encounter)
	w.WriteU16(uint16(len(p.F_roles)))
	for k := range p.F_roles {
		p.F_roles[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_curriculums)))
	for k := range p.F_curriculums {
		p.F_curriculums[k].Pack(w)
	}
}

func PKT_classroom_info(reader *packet.Packet) (tbl classroom_info, err error) {
	tbl.F_encounter, err = reader.ReadS32()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_roles = make([]room_data, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_roles[i], err = PKT_room_data(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_curriculums = make([]curriculum, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_curriculums[i], err = PKT_curriculum(reader)
			checkErr(err)
		}
	}

	return
}

type classroom_role struct {
	F_roles []room_data
}

func (p classroom_role) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_roles)))
	for k := range p.F_roles {
		p.F_roles[k].Pack(w)
	}
}

func PKT_classroom_role(reader *packet.Packet) (tbl classroom_role, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_roles = make([]room_data, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_roles[i], err = PKT_room_data(reader)
			checkErr(err)
		}
	}

	return
}

type room_action struct {
	F_id  uint64
	F_pos uint8
}

func (p room_action) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	w.WriteByte(p.F_pos)
}

func PKT_room_action(reader *packet.Packet) (tbl room_action, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_pos, err = reader.ReadByte()
	checkErr(err)

	return
}

type curriculums_info struct {
	F_itemchange  item_change_info
	F_curriculums []curriculum
}

func (p curriculums_info) Pack(w *packet.Packet) {
	p.F_itemchange.Pack(w)
	w.WriteU16(uint16(len(p.F_curriculums)))
	for k := range p.F_curriculums {
		p.F_curriculums[k].Pack(w)
	}
}

func PKT_curriculums_info(reader *packet.Packet) (tbl curriculums_info, err error) {
	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_curriculums = make([]curriculum, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_curriculums[i], err = PKT_curriculum(reader)
			checkErr(err)
		}
	}

	return
}

type room_curriculum_ids struct {
	F_roompos       uint8
	F_curriculumpos uint8
}

func (p room_curriculum_ids) Pack(w *packet.Packet) {
	w.WriteByte(p.F_roompos)
	w.WriteByte(p.F_curriculumpos)
}

func PKT_room_curriculum_ids(reader *packet.Packet) (tbl room_curriculum_ids, err error) {
	tbl.F_roompos, err = reader.ReadByte()
	checkErr(err)

	tbl.F_curriculumpos, err = reader.ReadByte()
	checkErr(err)

	return
}

type set_curriculum_info struct {
	F_classroom classroom_info
	F_warship   warship_info
}

func (p set_curriculum_info) Pack(w *packet.Packet) {
	p.F_classroom.Pack(w)
	p.F_warship.Pack(w)
}

func PKT_set_curriculum_info(reader *packet.Packet) (tbl set_curriculum_info, err error) {
	tbl.F_classroom, err = PKT_classroom_info(reader)
	checkErr(err)

	tbl.F_warship, err = PKT_warship_info(reader)
	checkErr(err)

	return
}

type clearcd_curriculum_info struct {
	F_classroom  classroom_info
	F_warship    warship_info
	F_itemchange item_change_info
}

func (p clearcd_curriculum_info) Pack(w *packet.Packet) {
	p.F_classroom.Pack(w)
	p.F_warship.Pack(w)
	p.F_itemchange.Pack(w)
}

func PKT_clearcd_curriculum_info(reader *packet.Packet) (tbl clearcd_curriculum_info, err error) {
	tbl.F_classroom, err = PKT_classroom_info(reader)
	checkErr(err)

	tbl.F_warship, err = PKT_warship_info(reader)
	checkErr(err)

	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	return
}

type gift_req_info struct {
	F_giftId    uint32
	F_warshipId uint64
}

func (p gift_req_info) Pack(w *packet.Packet) {
	w.WriteU32(p.F_giftId)
	w.WriteU64(p.F_warshipId)
}

func PKT_gift_req_info(reader *packet.Packet) (tbl gift_req_info, err error) {
	tbl.F_giftId, err = reader.ReadU32()
	checkErr(err)

	tbl.F_warshipId, err = reader.ReadU64()
	checkErr(err)

	return
}

type gift_req_seccess struct {
	F_warship    warship_info
	F_giftchange gift_info
}

func (p gift_req_seccess) Pack(w *packet.Packet) {
	p.F_warship.Pack(w)
	p.F_giftchange.Pack(w)
}

func PKT_gift_req_seccess(reader *packet.Packet) (tbl gift_req_seccess, err error) {
	tbl.F_warship, err = PKT_warship_info(reader)
	checkErr(err)

	tbl.F_giftchange, err = PKT_gift_info(reader)
	checkErr(err)

	return
}

type encounter_info struct {
	F_shipId        uint64
	F_storyId       uint16
	F_rolelovepoint int32
	F_encounter     int32
	F_itemchange    item_change_info
}

func (p encounter_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_shipId)
	w.WriteU16(p.F_storyId)
	w.WriteS32(p.F_rolelovepoint)
	w.WriteS32(p.F_encounter)
	p.F_itemchange.Pack(w)
}

func PKT_encounter_info(reader *packet.Packet) (tbl encounter_info, err error) {
	tbl.F_shipId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_storyId, err = reader.ReadU16()
	checkErr(err)

	tbl.F_rolelovepoint, err = reader.ReadS32()
	checkErr(err)

	tbl.F_encounter, err = reader.ReadS32()
	checkErr(err)

	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	return
}

type team_repair_supply struct {
	F_teamNo     uint8
	F_itemchange item_change_info
}

func (p team_repair_supply) Pack(w *packet.Packet) {
	w.WriteByte(p.F_teamNo)
	p.F_itemchange.Pack(w)
}

func PKT_team_repair_supply(reader *packet.Packet) (tbl team_repair_supply, err error) {
	tbl.F_teamNo, err = reader.ReadByte()
	checkErr(err)

	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	return
}

type build_info struct {
	F_gold      int32
	F_fuel      int32
	F_material  int32
	F_luckyItem uint16
}

func (p build_info) Pack(w *packet.Packet) {
	w.WriteS32(p.F_gold)
	w.WriteS32(p.F_fuel)
	w.WriteS32(p.F_material)
	w.WriteU16(p.F_luckyItem)
}

func PKT_build_info(reader *packet.Packet) (tbl build_info, err error) {
	tbl.F_gold, err = reader.ReadS32()
	checkErr(err)

	tbl.F_fuel, err = reader.ReadS32()
	checkErr(err)

	tbl.F_material, err = reader.ReadS32()
	checkErr(err)

	tbl.F_luckyItem, err = reader.ReadU16()
	checkErr(err)

	return
}

type weapon_fit struct {
	F_id       uint64
	F_pos      string
	F_weaponId uint32
}

func (p weapon_fit) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	w.WriteString(p.F_pos)
	w.WriteU32(p.F_weaponId)
}

func PKT_weapon_fit(reader *packet.Packet) (tbl weapon_fit, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_pos, err = reader.ReadString()
	checkErr(err)

	tbl.F_weaponId, err = reader.ReadU32()
	checkErr(err)

	return
}

type weapon_fits struct {
	F_fit_info []weapon_fit
}

func (p weapon_fits) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_fit_info)))
	for k := range p.F_fit_info {
		p.F_fit_info[k].Pack(w)
	}
}

func PKT_weapon_fits(reader *packet.Packet) (tbl weapon_fits, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_fit_info = make([]weapon_fit, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_fit_info[i], err = PKT_weapon_fit(reader)
			checkErr(err)
		}
	}

	return
}

type weapon_remove struct {
	F_id  uint64
	F_pos string
}

func (p weapon_remove) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	w.WriteString(p.F_pos)
}

func PKT_weapon_remove(reader *packet.Packet) (tbl weapon_remove, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_pos, err = reader.ReadString()
	checkErr(err)

	return
}

type armor_fit struct {
	F_id      uint64
	F_armor   int32
	F_torpedo int32
}

func (p armor_fit) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	w.WriteS32(p.F_armor)
	w.WriteS32(p.F_torpedo)
}

func PKT_armor_fit(reader *packet.Packet) (tbl armor_fit, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_armor, err = reader.ReadS32()
	checkErr(err)

	tbl.F_torpedo, err = reader.ReadS32()
	checkErr(err)

	return
}

type res_change struct {
	F_tid     uint32
	F_quanity int32
}

func (p res_change) Pack(w *packet.Packet) {
	w.WriteU32(p.F_tid)
	w.WriteS32(p.F_quanity)
}

func PKT_res_change(reader *packet.Packet) (tbl res_change, err error) {
	tbl.F_tid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_quanity, err = reader.ReadS32()
	checkErr(err)

	return
}

type warship_change struct {
	F_id      uint64
	F_tid     uint32
	F_quanity int32
	F_islock  bool
	F_weapon  []shipWeapon_change
}

func (p warship_change) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	w.WriteU32(p.F_tid)
	w.WriteS32(p.F_quanity)
	w.WriteBool(p.F_islock)
	w.WriteU16(uint16(len(p.F_weapon)))
	for k := range p.F_weapon {
		p.F_weapon[k].Pack(w)
	}
}

func PKT_warship_change(reader *packet.Packet) (tbl warship_change, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_tid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_quanity, err = reader.ReadS32()
	checkErr(err)

	tbl.F_islock, err = reader.ReadBool()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_weapon = make([]shipWeapon_change, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_weapon[i], err = PKT_shipWeapon_change(reader)
			checkErr(err)
		}
	}

	return
}

type shipWeapon_change struct {
	F_weaponid  uint64
	F_weapontid uint32
	F_posid     uint8
}

func (p shipWeapon_change) Pack(w *packet.Packet) {
	w.WriteU64(p.F_weaponid)
	w.WriteU32(p.F_weapontid)
	w.WriteByte(p.F_posid)
}

func PKT_shipWeapon_change(reader *packet.Packet) (tbl shipWeapon_change, err error) {
	tbl.F_weaponid, err = reader.ReadU64()
	checkErr(err)

	tbl.F_weapontid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_posid, err = reader.ReadByte()
	checkErr(err)

	return
}

type weapon_change struct {
	F_id  uint64
	F_tid uint32
	F_lv  uint16
}

func (p weapon_change) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	w.WriteU32(p.F_tid)
	w.WriteU16(p.F_lv)
}

func PKT_weapon_change(reader *packet.Packet) (tbl weapon_change, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_tid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_lv, err = reader.ReadU16()
	checkErr(err)

	return
}

type equipment_change struct {
	F_id      uint64
	F_tid     uint16
	F_quanity int32
}

func (p equipment_change) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	w.WriteU16(p.F_tid)
	w.WriteS32(p.F_quanity)
}

func PKT_equipment_change(reader *packet.Packet) (tbl equipment_change, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_tid, err = reader.ReadU16()
	checkErr(err)

	tbl.F_quanity, err = reader.ReadS32()
	checkErr(err)

	return
}

type weapon_dev_info struct {
	F_WeaponId      uint32
	F_DevStatus     uint8
	F_DevFinishTime int64
}

func (p weapon_dev_info) Pack(w *packet.Packet) {
	w.WriteU32(p.F_WeaponId)
	w.WriteByte(p.F_DevStatus)
	w.WriteS64(p.F_DevFinishTime)
}

func PKT_weapon_dev_info(reader *packet.Packet) (tbl weapon_dev_info, err error) {
	tbl.F_WeaponId, err = reader.ReadU32()
	checkErr(err)

	tbl.F_DevStatus, err = reader.ReadByte()
	checkErr(err)

	tbl.F_DevFinishTime, err = reader.ReadS64()
	checkErr(err)

	return
}

type dev_weapon struct {
	F_WeaponId uint32
}

func (p dev_weapon) Pack(w *packet.Packet) {
	w.WriteU32(p.F_WeaponId)
}

func PKT_dev_weapon(reader *packet.Packet) (tbl dev_weapon, err error) {
	tbl.F_WeaponId, err = reader.ReadU32()
	checkErr(err)

	return
}

type weapon_dev_exp struct {
	F_devType uint8
	F_devExp  uint32
}

func (p weapon_dev_exp) Pack(w *packet.Packet) {
	w.WriteByte(p.F_devType)
	w.WriteU32(p.F_devExp)
}

func PKT_weapon_dev_exp(reader *packet.Packet) (tbl weapon_dev_exp, err error) {
	tbl.F_devType, err = reader.ReadByte()
	checkErr(err)

	tbl.F_devExp, err = reader.ReadU32()
	checkErr(err)

	return
}

type weapon_study_change struct {
	F_itemChange   item_change_info
	F_devExpChange weapon_dev_exp
}

func (p weapon_study_change) Pack(w *packet.Packet) {
	p.F_itemChange.Pack(w)
	p.F_devExpChange.Pack(w)
}

func PKT_weapon_study_change(reader *packet.Packet) (tbl weapon_study_change, err error) {
	tbl.F_itemChange, err = PKT_item_change_info(reader)
	checkErr(err)

	tbl.F_devExpChange, err = PKT_weapon_dev_exp(reader)
	checkErr(err)

	return
}

type gift_info struct {
	F_tid     uint32
	F_quanity int32
}

func (p gift_info) Pack(w *packet.Packet) {
	w.WriteU32(p.F_tid)
	w.WriteS32(p.F_quanity)
}

func PKT_gift_info(reader *packet.Packet) (tbl gift_info, err error) {
	tbl.F_tid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_quanity, err = reader.ReadS32()
	checkErr(err)

	return
}

type item_info struct {
	F_tid     uint32
	F_quanity int32
}

func (p item_info) Pack(w *packet.Packet) {
	w.WriteU32(p.F_tid)
	w.WriteS32(p.F_quanity)
}

func PKT_item_info(reader *packet.Packet) (tbl item_info, err error) {
	tbl.F_tid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_quanity, err = reader.ReadS32()
	checkErr(err)

	return
}

type attr struct {
	F_attrId uint16
	F_value  float32
}

func (p attr) Pack(w *packet.Packet) {
	w.WriteU16(p.F_attrId)
	w.WriteFloat32(p.F_value)
}

func PKT_attr(reader *packet.Packet) (tbl attr, err error) {
	tbl.F_attrId, err = reader.ReadU16()
	checkErr(err)

	tbl.F_value, err = reader.ReadFloat32()
	checkErr(err)

	return
}

type team_info struct {
	F_teamNo        uint8
	F_warshipConfig []warship_config
	F_isExpedition  bool
	F_formationNo   uint8
}

func (p team_info) Pack(w *packet.Packet) {
	w.WriteByte(p.F_teamNo)
	w.WriteU16(uint16(len(p.F_warshipConfig)))
	for k := range p.F_warshipConfig {
		p.F_warshipConfig[k].Pack(w)
	}
	w.WriteBool(p.F_isExpedition)
	w.WriteByte(p.F_formationNo)
}

func PKT_team_info(reader *packet.Packet) (tbl team_info, err error) {
	tbl.F_teamNo, err = reader.ReadByte()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_warshipConfig = make([]warship_config, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_warshipConfig[i], err = PKT_warship_config(reader)
			checkErr(err)
		}
	}

	tbl.F_isExpedition, err = reader.ReadBool()
	checkErr(err)

	tbl.F_formationNo, err = reader.ReadByte()
	checkErr(err)

	return
}

type warship_config struct {
	F_warshipId uint64
	F_position  uint8
}

func (p warship_config) Pack(w *packet.Packet) {
	w.WriteU64(p.F_warshipId)
	w.WriteByte(p.F_position)
}

func PKT_warship_config(reader *packet.Packet) (tbl warship_config, err error) {
	tbl.F_warshipId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_position, err = reader.ReadByte()
	checkErr(err)

	return
}

type Active_team_return struct {
	F_teamINfo team_info
	F_Diamond  res_change
}

func (p Active_team_return) Pack(w *packet.Packet) {
	p.F_teamINfo.Pack(w)
	p.F_Diamond.Pack(w)
}

func PKT_Active_team_return(reader *packet.Packet) (tbl Active_team_return, err error) {
	tbl.F_teamINfo, err = PKT_team_info(reader)
	checkErr(err)

	tbl.F_Diamond, err = PKT_res_change(reader)
	checkErr(err)

	return
}

type item_change_info struct {
	F_res         []res_change
	F_warship     []warship_change
	F_weapon      []newWeapon_info
	F_equipment   []equipment_change
	F_gift        []gift_info
	F_item        []item_info
	F_accessories []accessories_info
	F_wepon_dev   []weapon_dev_info
	F_ship_res    []ship_res_info
	F_dormGift    []dormgift_info
}

func (p item_change_info) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_res)))
	for k := range p.F_res {
		p.F_res[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_warship)))
	for k := range p.F_warship {
		p.F_warship[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_weapon)))
	for k := range p.F_weapon {
		p.F_weapon[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_equipment)))
	for k := range p.F_equipment {
		p.F_equipment[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_gift)))
	for k := range p.F_gift {
		p.F_gift[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_item)))
	for k := range p.F_item {
		p.F_item[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_accessories)))
	for k := range p.F_accessories {
		p.F_accessories[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_wepon_dev)))
	for k := range p.F_wepon_dev {
		p.F_wepon_dev[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_ship_res)))
	for k := range p.F_ship_res {
		p.F_ship_res[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_dormGift)))
	for k := range p.F_dormGift {
		p.F_dormGift[k].Pack(w)
	}
}

func PKT_item_change_info(reader *packet.Packet) (tbl item_change_info, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_res = make([]res_change, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_res[i], err = PKT_res_change(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_warship = make([]warship_change, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_warship[i], err = PKT_warship_change(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_weapon = make([]newWeapon_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_weapon[i], err = PKT_newWeapon_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_equipment = make([]equipment_change, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_equipment[i], err = PKT_equipment_change(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_gift = make([]gift_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_gift[i], err = PKT_gift_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_item = make([]item_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_item[i], err = PKT_item_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_accessories = make([]accessories_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_accessories[i], err = PKT_accessories_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_wepon_dev = make([]weapon_dev_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_wepon_dev[i], err = PKT_weapon_dev_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_ship_res = make([]ship_res_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_ship_res[i], err = PKT_ship_res_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_dormGift = make([]dormgift_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_dormGift[i], err = PKT_dormgift_info(reader)
			checkErr(err)
		}
	}

	return
}

type dormgift_info struct {
	F_tid     uint32
	F_quanity int32
}

func (p dormgift_info) Pack(w *packet.Packet) {
	w.WriteU32(p.F_tid)
	w.WriteS32(p.F_quanity)
}

func PKT_dormgift_info(reader *packet.Packet) (tbl dormgift_info, err error) {
	tbl.F_tid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_quanity, err = reader.ReadS32()
	checkErr(err)

	return
}

type weapon_fit_response struct {
	F_itemchange item_change_info
	F_ship_info  warship_info
}

func (p weapon_fit_response) Pack(w *packet.Packet) {
	p.F_itemchange.Pack(w)
	p.F_ship_info.Pack(w)
}

func PKT_weapon_fit_response(reader *packet.Packet) (tbl weapon_fit_response, err error) {
	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	tbl.F_ship_info, err = PKT_warship_info(reader)
	checkErr(err)

	return
}

type checkin_response struct {
	F_num        uint16
	F_itemchange item_change_info
}

func (p checkin_response) Pack(w *packet.Packet) {
	w.WriteU16(p.F_num)
	p.F_itemchange.Pack(w)
}

func PKT_checkin_response(reader *packet.Packet) (tbl checkin_response, err error) {
	tbl.F_num, err = reader.ReadU16()
	checkErr(err)

	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	return
}

type mission_info struct {
	F_id          uint32
	F_pointRecord []uint16
}

func (p mission_info) Pack(w *packet.Packet) {
	w.WriteU32(p.F_id)
	w.WriteU16(uint16(len(p.F_pointRecord)))
	for k := range p.F_pointRecord {
		w.WriteU16(p.F_pointRecord[k])
	}
}

func PKT_mission_info(reader *packet.Packet) (tbl mission_info, err error) {
	tbl.F_id, err = reader.ReadU32()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadU16()
			tbl.F_pointRecord = append(tbl.F_pointRecord, v)
			checkErr(err)
		}
	}

	return
}

type battle_attack_info struct {
	F_teamNo    uint8
	F_missionId uint32
}

func (p battle_attack_info) Pack(w *packet.Packet) {
	w.WriteByte(p.F_teamNo)
	w.WriteU32(p.F_missionId)
}

func PKT_battle_attack_info(reader *packet.Packet) (tbl battle_attack_info, err error) {
	tbl.F_teamNo, err = reader.ReadByte()
	checkErr(err)

	tbl.F_missionId, err = reader.ReadU32()
	checkErr(err)

	return
}

type battle_report_info struct {
	F_result     bool
	F_mvp        uint64
	F_judgment   uint8
	F_durability []warship_durability_info
}

func (p battle_report_info) Pack(w *packet.Packet) {
	w.WriteBool(p.F_result)
	w.WriteU64(p.F_mvp)
	w.WriteByte(p.F_judgment)
	w.WriteU16(uint16(len(p.F_durability)))
	for k := range p.F_durability {
		p.F_durability[k].Pack(w)
	}
}

func PKT_battle_report_info(reader *packet.Packet) (tbl battle_report_info, err error) {
	tbl.F_result, err = reader.ReadBool()
	checkErr(err)

	tbl.F_mvp, err = reader.ReadU64()
	checkErr(err)

	tbl.F_judgment, err = reader.ReadByte()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_durability = make([]warship_durability_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_durability[i], err = PKT_warship_durability_info(reader)
			checkErr(err)
		}
	}

	return
}

type warship_durability_info struct {
	F_warshipId  uint64
	F_durability int32
}

func (p warship_durability_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_warshipId)
	w.WriteS32(p.F_durability)
}

func PKT_warship_durability_info(reader *packet.Packet) (tbl warship_durability_info, err error) {
	tbl.F_warshipId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_durability, err = reader.ReadS32()
	checkErr(err)

	return
}

type base_match_info struct {
	F_robotId       uint16
	F_itemchange    item_change_info
	F_constructions []construction_info
	F_warships      []warship_info
	F_robTemp       []res_change
	F_robStore      []res_change
	F_medal         uint32
}

func (p base_match_info) Pack(w *packet.Packet) {
	w.WriteU16(p.F_robotId)
	p.F_itemchange.Pack(w)
	w.WriteU16(uint16(len(p.F_constructions)))
	for k := range p.F_constructions {
		p.F_constructions[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_warships)))
	for k := range p.F_warships {
		p.F_warships[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_robTemp)))
	for k := range p.F_robTemp {
		p.F_robTemp[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_robStore)))
	for k := range p.F_robStore {
		p.F_robStore[k].Pack(w)
	}
	w.WriteU32(p.F_medal)
}

func PKT_base_match_info(reader *packet.Packet) (tbl base_match_info, err error) {
	tbl.F_robotId, err = reader.ReadU16()
	checkErr(err)

	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_constructions = make([]construction_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_constructions[i], err = PKT_construction_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_warships = make([]warship_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_warships[i], err = PKT_warship_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_robTemp = make([]res_change, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_robTemp[i], err = PKT_res_change(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_robStore = make([]res_change, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_robStore[i], err = PKT_res_change(reader)
			checkErr(err)
		}
	}

	tbl.F_medal, err = reader.ReadU32()
	checkErr(err)

	return
}

type ship_skill_info struct {
	F_shipId  uint64
	F_skillId uint32
}

func (p ship_skill_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_shipId)
	w.WriteU32(p.F_skillId)
}

func PKT_ship_skill_info(reader *packet.Packet) (tbl ship_skill_info, err error) {
	tbl.F_shipId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_skillId, err = reader.ReadU32()
	checkErr(err)

	return
}

type entity_id_array struct {
	F_ids []uint64
}

func (p entity_id_array) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_ids)))
	for k := range p.F_ids {
		w.WriteU64(p.F_ids[k])
	}
}

func PKT_entity_id_array(reader *packet.Packet) (tbl entity_id_array, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadU64()
			tbl.F_ids = append(tbl.F_ids, v)
			checkErr(err)
		}
	}

	return
}

type task_info struct {
	F_taskId     uint16
	F_status     uint8
	F_taskParams []uint32
}

func (p task_info) Pack(w *packet.Packet) {
	w.WriteU16(p.F_taskId)
	w.WriteByte(p.F_status)
	w.WriteU16(uint16(len(p.F_taskParams)))
	for k := range p.F_taskParams {
		w.WriteU32(p.F_taskParams[k])
	}
}

func PKT_task_info(reader *packet.Packet) (tbl task_info, err error) {
	tbl.F_taskId, err = reader.ReadU16()
	checkErr(err)

	tbl.F_status, err = reader.ReadByte()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadU32()
			tbl.F_taskParams = append(tbl.F_taskParams, v)
			checkErr(err)
		}
	}

	return
}

type task_list struct {
	F_info []task_info
}

func (p task_list) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_info)))
	for k := range p.F_info {
		p.F_info[k].Pack(w)
	}
}

func PKT_task_list(reader *packet.Packet) (tbl task_list, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_info = make([]task_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_info[i], err = PKT_task_info(reader)
			checkErr(err)
		}
	}

	return
}

type task_id struct {
	F_id uint16
}

func (p task_id) Pack(w *packet.Packet) {
	w.WriteU16(p.F_id)
}

func PKT_task_id(reader *packet.Packet) (tbl task_id, err error) {
	tbl.F_id, err = reader.ReadU16()
	checkErr(err)

	return
}

type pvp_base_report_info struct {
	F_result     bool
	F_judgment   uint8
	F_gold       int32
	F_fuel       int32
	F_material   int32
	F_destroy    uint8
	F_durability []warship_durability_info
	F_videotape  []byte
}

func (p pvp_base_report_info) Pack(w *packet.Packet) {
	w.WriteBool(p.F_result)
	w.WriteByte(p.F_judgment)
	w.WriteS32(p.F_gold)
	w.WriteS32(p.F_fuel)
	w.WriteS32(p.F_material)
	w.WriteByte(p.F_destroy)
	w.WriteU16(uint16(len(p.F_durability)))
	for k := range p.F_durability {
		p.F_durability[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_videotape)))
	for k := range p.F_videotape {
		w.WriteByte(p.F_videotape[k])
	}
}

func PKT_pvp_base_report_info(reader *packet.Packet) (tbl pvp_base_report_info, err error) {
	tbl.F_result, err = reader.ReadBool()
	checkErr(err)

	tbl.F_judgment, err = reader.ReadByte()
	checkErr(err)

	tbl.F_gold, err = reader.ReadS32()
	checkErr(err)

	tbl.F_fuel, err = reader.ReadS32()
	checkErr(err)

	tbl.F_material, err = reader.ReadS32()
	checkErr(err)

	tbl.F_destroy, err = reader.ReadByte()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_durability = make([]warship_durability_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_durability[i], err = PKT_warship_durability_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadByte()
			tbl.F_videotape = append(tbl.F_videotape, v)
			checkErr(err)
		}
	}

	return
}

type pvp_base_info struct {
	F_medal      uint32
	F_protection int64
}

func (p pvp_base_info) Pack(w *packet.Packet) {
	w.WriteU32(p.F_medal)
	w.WriteS64(p.F_protection)
}

func PKT_pvp_base_info(reader *packet.Packet) (tbl pvp_base_info, err error) {
	tbl.F_medal, err = reader.ReadU32()
	checkErr(err)

	tbl.F_protection, err = reader.ReadS64()
	checkErr(err)

	return
}

type pvp_base_succeed_info struct {
	F_itemchange item_change_info
	F_pvpbase    pvp_base_info
}

func (p pvp_base_succeed_info) Pack(w *packet.Packet) {
	p.F_itemchange.Pack(w)
	p.F_pvpbase.Pack(w)
}

func PKT_pvp_base_succeed_info(reader *packet.Packet) (tbl pvp_base_succeed_info, err error) {
	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	tbl.F_pvpbase, err = PKT_pvp_base_info(reader)
	checkErr(err)

	return
}

type constructionResChange struct {
	F_constructionId       uint64
	F_constructionStoreRes uint32
}

func (p constructionResChange) Pack(w *packet.Packet) {
	w.WriteU64(p.F_constructionId)
	w.WriteU32(p.F_constructionStoreRes)
}

func PKT_constructionResChange(reader *packet.Packet) (tbl constructionResChange, err error) {
	tbl.F_constructionId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_constructionStoreRes, err = reader.ReadU32()
	checkErr(err)

	return
}

type pvp_base_notify struct {
	F_constructionRes []constructionResChange
	F_itemchange      item_change_info
	F_pvpbase         pvp_base_info
}

func (p pvp_base_notify) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_constructionRes)))
	for k := range p.F_constructionRes {
		p.F_constructionRes[k].Pack(w)
	}
	p.F_itemchange.Pack(w)
	p.F_pvpbase.Pack(w)
}

func PKT_pvp_base_notify(reader *packet.Packet) (tbl pvp_base_notify, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_constructionRes = make([]constructionResChange, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_constructionRes[i], err = PKT_constructionResChange(reader)
			checkErr(err)
		}
	}

	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	tbl.F_pvpbase, err = PKT_pvp_base_info(reader)
	checkErr(err)

	return
}

type pvpbaselog struct {
	F_status      bool
	F_nickName    string
	F_medal       uint32
	F_medalChange int32
	F_judgment    uint8
	F_destroy     uint8
	F_reward      []item_info
	F_time        int64
	F_video_id    string
}

func (p pvpbaselog) Pack(w *packet.Packet) {
	w.WriteBool(p.F_status)
	w.WriteString(p.F_nickName)
	w.WriteU32(p.F_medal)
	w.WriteS32(p.F_medalChange)
	w.WriteByte(p.F_judgment)
	w.WriteByte(p.F_destroy)
	w.WriteU16(uint16(len(p.F_reward)))
	for k := range p.F_reward {
		p.F_reward[k].Pack(w)
	}
	w.WriteS64(p.F_time)
	w.WriteString(p.F_video_id)
}

func PKT_pvpbaselog(reader *packet.Packet) (tbl pvpbaselog, err error) {
	tbl.F_status, err = reader.ReadBool()
	checkErr(err)

	tbl.F_nickName, err = reader.ReadString()
	checkErr(err)

	tbl.F_medal, err = reader.ReadU32()
	checkErr(err)

	tbl.F_medalChange, err = reader.ReadS32()
	checkErr(err)

	tbl.F_judgment, err = reader.ReadByte()
	checkErr(err)

	tbl.F_destroy, err = reader.ReadByte()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_reward = make([]item_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_reward[i], err = PKT_item_info(reader)
			checkErr(err)
		}
	}

	tbl.F_time, err = reader.ReadS64()
	checkErr(err)

	tbl.F_video_id, err = reader.ReadString()
	checkErr(err)

	return
}

type pvp_base_log_info struct {
	F_logs []pvpbaselog
}

func (p pvp_base_log_info) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_logs)))
	for k := range p.F_logs {
		p.F_logs[k].Pack(w)
	}
}

func PKT_pvp_base_log_info(reader *packet.Packet) (tbl pvp_base_log_info, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_logs = make([]pvpbaselog, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_logs[i], err = PKT_pvpbaselog(reader)
			checkErr(err)
		}
	}

	return
}

type baselogreq struct {
	F_type bool
}

func (p baselogreq) Pack(w *packet.Packet) {
	w.WriteBool(p.F_type)
}

func PKT_baselogreq(reader *packet.Packet) (tbl baselogreq, err error) {
	tbl.F_type, err = reader.ReadBool()
	checkErr(err)

	return
}

type baserankinfo struct {
	F_nickname string
	F_headIcon uint32
	F_medal    uint32
	F_rank     uint32
}

func (p baserankinfo) Pack(w *packet.Packet) {
	w.WriteString(p.F_nickname)
	w.WriteU32(p.F_headIcon)
	w.WriteU32(p.F_medal)
	w.WriteU32(p.F_rank)
}

func PKT_baserankinfo(reader *packet.Packet) (tbl baserankinfo, err error) {
	tbl.F_nickname, err = reader.ReadString()
	checkErr(err)

	tbl.F_headIcon, err = reader.ReadU32()
	checkErr(err)

	tbl.F_medal, err = reader.ReadU32()
	checkErr(err)

	tbl.F_rank, err = reader.ReadU32()
	checkErr(err)

	return
}

type pvp_base_rank_info struct {
	F_baserank []baserankinfo
	F_myrank   uint32
}

func (p pvp_base_rank_info) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_baserank)))
	for k := range p.F_baserank {
		p.F_baserank[k].Pack(w)
	}
	w.WriteU32(p.F_myrank)
}

func PKT_pvp_base_rank_info(reader *packet.Packet) (tbl pvp_base_rank_info, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_baserank = make([]baserankinfo, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_baserank[i], err = PKT_baserankinfo(reader)
			checkErr(err)
		}
	}

	tbl.F_myrank, err = reader.ReadU32()
	checkErr(err)

	return
}

type task_award_response struct {
	F_item_change item_change_info
	F_task_info   task_list
}

func (p task_award_response) Pack(w *packet.Packet) {
	p.F_item_change.Pack(w)
	p.F_task_info.Pack(w)
}

func PKT_task_award_response(reader *packet.Packet) (tbl task_award_response, err error) {
	tbl.F_item_change, err = PKT_item_change_info(reader)
	checkErr(err)

	tbl.F_task_info, err = PKT_task_list(reader)
	checkErr(err)

	return
}

type mail struct {
	F_title      string
	F_desc       string
	F_attachment []item_info
	F_status     bool
	F_time       string
	F_mailHead   int32
}

func (p mail) Pack(w *packet.Packet) {
	w.WriteString(p.F_title)
	w.WriteString(p.F_desc)
	w.WriteU16(uint16(len(p.F_attachment)))
	for k := range p.F_attachment {
		p.F_attachment[k].Pack(w)
	}
	w.WriteBool(p.F_status)
	w.WriteString(p.F_time)
	w.WriteS32(p.F_mailHead)
}

func PKT_mail(reader *packet.Packet) (tbl mail, err error) {
	tbl.F_title, err = reader.ReadString()
	checkErr(err)

	tbl.F_desc, err = reader.ReadString()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_attachment = make([]item_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_attachment[i], err = PKT_item_info(reader)
			checkErr(err)
		}
	}

	tbl.F_status, err = reader.ReadBool()
	checkErr(err)

	tbl.F_time, err = reader.ReadString()
	checkErr(err)

	tbl.F_mailHead, err = reader.ReadS32()
	checkErr(err)

	return
}

type mail_list struct {
	F_mails []mail
}

func (p mail_list) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_mails)))
	for k := range p.F_mails {
		p.F_mails[k].Pack(w)
	}
}

func PKT_mail_list(reader *packet.Packet) (tbl mail_list, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_mails = make([]mail, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_mails[i], err = PKT_mail(reader)
			checkErr(err)
		}
	}

	return
}

type guide_node struct {
	F_node_id uint32
}

func (p guide_node) Pack(w *packet.Packet) {
	w.WriteU32(p.F_node_id)
}

func PKT_guide_node(reader *packet.Packet) (tbl guide_node, err error) {
	tbl.F_node_id, err = reader.ReadU32()
	checkErr(err)

	return
}

type msg struct {
	F_type uint8
	F_body string
}

func (p msg) Pack(w *packet.Packet) {
	w.WriteByte(p.F_type)
	w.WriteString(p.F_body)
}

func PKT_msg(reader *packet.Packet) (tbl msg, err error) {
	tbl.F_type, err = reader.ReadByte()
	checkErr(err)

	tbl.F_body, err = reader.ReadString()
	checkErr(err)

	return
}

type accessories_info struct {
	F_acs_id               uint64
	F_acs_tid              uint32
	F_acs_fit              uint64
	F_acs_evolution        uint16
	F_acs_finish_make_time int64
	F_acs_fix_attrs        []attr
	F_acs_rand_attrs       []attr
	F_acs_lock             bool
}

func (p accessories_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_acs_id)
	w.WriteU32(p.F_acs_tid)
	w.WriteU64(p.F_acs_fit)
	w.WriteU16(p.F_acs_evolution)
	w.WriteS64(p.F_acs_finish_make_time)
	w.WriteU16(uint16(len(p.F_acs_fix_attrs)))
	for k := range p.F_acs_fix_attrs {
		p.F_acs_fix_attrs[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_acs_rand_attrs)))
	for k := range p.F_acs_rand_attrs {
		p.F_acs_rand_attrs[k].Pack(w)
	}
	w.WriteBool(p.F_acs_lock)
}

func PKT_accessories_info(reader *packet.Packet) (tbl accessories_info, err error) {
	tbl.F_acs_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_acs_tid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_acs_fit, err = reader.ReadU64()
	checkErr(err)

	tbl.F_acs_evolution, err = reader.ReadU16()
	checkErr(err)

	tbl.F_acs_finish_make_time, err = reader.ReadS64()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_acs_fix_attrs = make([]attr, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_acs_fix_attrs[i], err = PKT_attr(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_acs_rand_attrs = make([]attr, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_acs_rand_attrs[i], err = PKT_attr(reader)
			checkErr(err)
		}
	}

	tbl.F_acs_lock, err = reader.ReadBool()
	checkErr(err)

	return
}

type acs_fit_payload struct {
	F_ship_id uint64
	F_pos     uint16
	F_acs_id  uint64
}

func (p acs_fit_payload) Pack(w *packet.Packet) {
	w.WriteU64(p.F_ship_id)
	w.WriteU16(p.F_pos)
	w.WriteU64(p.F_acs_id)
}

func PKT_acs_fit_payload(reader *packet.Packet) (tbl acs_fit_payload, err error) {
	tbl.F_ship_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_pos, err = reader.ReadU16()
	checkErr(err)

	tbl.F_acs_id, err = reader.ReadU64()
	checkErr(err)

	return
}

type acs_fit_response struct {
	F_ship_info warship_info
	F_acs_infos []accessories_info
}

func (p acs_fit_response) Pack(w *packet.Packet) {
	p.F_ship_info.Pack(w)
	w.WriteU16(uint16(len(p.F_acs_infos)))
	for k := range p.F_acs_infos {
		p.F_acs_infos[k].Pack(w)
	}
}

func PKT_acs_fit_response(reader *packet.Packet) (tbl acs_fit_response, err error) {
	tbl.F_ship_info, err = PKT_warship_info(reader)
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_acs_infos = make([]accessories_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_acs_infos[i], err = PKT_accessories_info(reader)
			checkErr(err)
		}
	}

	return
}

type acs_make_payload struct {
	F_gold     int32
	F_fuel     int32
	F_material int32
}

func (p acs_make_payload) Pack(w *packet.Packet) {
	w.WriteS32(p.F_gold)
	w.WriteS32(p.F_fuel)
	w.WriteS32(p.F_material)
}

func PKT_acs_make_payload(reader *packet.Packet) (tbl acs_make_payload, err error) {
	tbl.F_gold, err = reader.ReadS32()
	checkErr(err)

	tbl.F_fuel, err = reader.ReadS32()
	checkErr(err)

	tbl.F_material, err = reader.ReadS32()
	checkErr(err)

	return
}

type acs_evolution_payload struct {
	F_acs_id            uint64
	F_acs_evolution_res int32
}

func (p acs_evolution_payload) Pack(w *packet.Packet) {
	w.WriteU64(p.F_acs_id)
	w.WriteS32(p.F_acs_evolution_res)
}

func PKT_acs_evolution_payload(reader *packet.Packet) (tbl acs_evolution_payload, err error) {
	tbl.F_acs_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_acs_evolution_res, err = reader.ReadS32()
	checkErr(err)

	return
}

type accessories_clearcd_response struct {
	F_acs_id     uint64
	F_itemchange item_change_info
}

func (p accessories_clearcd_response) Pack(w *packet.Packet) {
	w.WriteU64(p.F_acs_id)
	p.F_itemchange.Pack(w)
}

func PKT_accessories_clearcd_response(reader *packet.Packet) (tbl accessories_clearcd_response, err error) {
	tbl.F_acs_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	return
}

type chat_message_info struct {
	F_chat_id  uint64
	F_type     uint32
	F_send_ctx string
}

func (p chat_message_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_chat_id)
	w.WriteU32(p.F_type)
	w.WriteString(p.F_send_ctx)
}

func PKT_chat_message_info(reader *packet.Packet) (tbl chat_message_info, err error) {
	tbl.F_chat_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_type, err = reader.ReadU32()
	checkErr(err)

	tbl.F_send_ctx, err = reader.ReadString()
	checkErr(err)

	return
}

type pvp_client_join struct {
	F_nonce uint64
	F_token []byte
}

func (p pvp_client_join) Pack(w *packet.Packet) {
	w.WriteU64(p.F_nonce)
	w.WriteBytes(p.F_token)
}

func PKT_pvp_client_join(reader *packet.Packet) (tbl pvp_client_join, err error) {
	tbl.F_nonce, err = reader.ReadU64()
	checkErr(err)

	tbl.F_token, err = reader.ReadBytes()
	checkErr(err)

	return
}

type pvp_client_message struct {
	F_data []byte
}

func (p pvp_client_message) Pack(w *packet.Packet) {
	w.WriteBytes(p.F_data)
}

func PKT_pvp_client_message(reader *packet.Packet) (tbl pvp_client_message, err error) {
	tbl.F_data, err = reader.ReadBytes()
	checkErr(err)

	return
}

type integral_info struct {
	F_uid      uint64
	F_integral int32
}

func (p integral_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_uid)
	w.WriteS32(p.F_integral)
}

func PKT_integral_info(reader *packet.Packet) (tbl integral_info, err error) {
	tbl.F_uid, err = reader.ReadU64()
	checkErr(err)

	tbl.F_integral, err = reader.ReadS32()
	checkErr(err)

	return
}

type pvp_client_integal struct {
	F_integrals []integral_info
}

func (p pvp_client_integal) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_integrals)))
	for k := range p.F_integrals {
		p.F_integrals[k].Pack(w)
	}
}

func PKT_pvp_client_integal(reader *packet.Packet) (tbl pvp_client_integal, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_integrals = make([]integral_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_integrals[i], err = PKT_integral_info(reader)
			checkErr(err)
		}
	}

	return
}

type pvp_action struct {
	F_uid  uint64
	F_data []byte
}

func (p pvp_action) Pack(w *packet.Packet) {
	w.WriteU64(p.F_uid)
	w.WriteBytes(p.F_data)
}

func PKT_pvp_action(reader *packet.Packet) (tbl pvp_action, err error) {
	tbl.F_uid, err = reader.ReadU64()
	checkErr(err)

	tbl.F_data, err = reader.ReadBytes()
	checkErr(err)

	return
}

type pvp_server_message struct {
	F_frame uint32
	F_data  []pvp_action
}

func (p pvp_server_message) Pack(w *packet.Packet) {
	w.WriteU32(p.F_frame)
	w.WriteU16(uint16(len(p.F_data)))
	for k := range p.F_data {
		p.F_data[k].Pack(w)
	}
}

func PKT_pvp_server_message(reader *packet.Packet) (tbl pvp_server_message, err error) {
	tbl.F_frame, err = reader.ReadU32()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_data = make([]pvp_action, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_data[i], err = PKT_pvp_action(reader)
			checkErr(err)
		}
	}

	return
}

type pvp_server_complete struct {
	F_status uint8
	F_vector uint64
}

func (p pvp_server_complete) Pack(w *packet.Packet) {
	w.WriteByte(p.F_status)
	w.WriteU64(p.F_vector)
}

func PKT_pvp_server_complete(reader *packet.Packet) (tbl pvp_server_complete, err error) {
	tbl.F_status, err = reader.ReadByte()
	checkErr(err)

	tbl.F_vector, err = reader.ReadU64()
	checkErr(err)

	return
}

type build_record_info struct {
	F_uid         uint64
	F_tid         uint32
	F_builderName string
	F_buildStar   uint8
	F_buildTime   int64
	F_costRes     []item_info
}

func (p build_record_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_uid)
	w.WriteU32(p.F_tid)
	w.WriteString(p.F_builderName)
	w.WriteByte(p.F_buildStar)
	w.WriteS64(p.F_buildTime)
	w.WriteU16(uint16(len(p.F_costRes)))
	for k := range p.F_costRes {
		p.F_costRes[k].Pack(w)
	}
}

func PKT_build_record_info(reader *packet.Packet) (tbl build_record_info, err error) {
	tbl.F_uid, err = reader.ReadU64()
	checkErr(err)

	tbl.F_tid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_builderName, err = reader.ReadString()
	checkErr(err)

	tbl.F_buildStar, err = reader.ReadByte()
	checkErr(err)

	tbl.F_buildTime, err = reader.ReadS64()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_costRes = make([]item_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_costRes[i], err = PKT_item_info(reader)
			checkErr(err)
		}
	}

	return
}

type build_records struct {
	F_record []build_record_info
}

func (p build_records) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_record)))
	for k := range p.F_record {
		p.F_record[k].Pack(w)
	}
}

func PKT_build_records(reader *packet.Packet) (tbl build_records, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_record = make([]build_record_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_record[i], err = PKT_build_record_info(reader)
			checkErr(err)
		}
	}

	return
}

type anti_addiction struct {
	F_playTime uint32
}

func (p anti_addiction) Pack(w *packet.Packet) {
	w.WriteU32(p.F_playTime)
}

func PKT_anti_addiction(reader *packet.Packet) (tbl anti_addiction, err error) {
	tbl.F_playTime, err = reader.ReadU32()
	checkErr(err)

	return
}

type upgrade_stage_resp struct {
	F_shipId     uint64
	F_stage      uint8
	F_itemChange item_change_info
}

func (p upgrade_stage_resp) Pack(w *packet.Packet) {
	w.WriteU64(p.F_shipId)
	w.WriteByte(p.F_stage)
	p.F_itemChange.Pack(w)
}

func PKT_upgrade_stage_resp(reader *packet.Packet) (tbl upgrade_stage_resp, err error) {
	tbl.F_shipId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_stage, err = reader.ReadByte()
	checkErr(err)

	tbl.F_itemChange, err = PKT_item_change_info(reader)
	checkErr(err)

	return
}

type item_use_req struct {
	F_shipId uint64
	F_items  []item_info
}

func (p item_use_req) Pack(w *packet.Packet) {
	w.WriteU64(p.F_shipId)
	w.WriteU16(uint16(len(p.F_items)))
	for k := range p.F_items {
		p.F_items[k].Pack(w)
	}
}

func PKT_item_use_req(reader *packet.Packet) (tbl item_use_req, err error) {
	tbl.F_shipId, err = reader.ReadU64()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_items = make([]item_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_items[i], err = PKT_item_info(reader)
			checkErr(err)
		}
	}

	return
}

type exp_item_use_resp struct {
	F_shipId     uint64
	F_exp        int32
	F_itemChange item_change_info
}

func (p exp_item_use_resp) Pack(w *packet.Packet) {
	w.WriteU64(p.F_shipId)
	w.WriteS32(p.F_exp)
	p.F_itemChange.Pack(w)
}

func PKT_exp_item_use_resp(reader *packet.Packet) (tbl exp_item_use_resp, err error) {
	tbl.F_shipId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_exp, err = reader.ReadS32()
	checkErr(err)

	tbl.F_itemChange, err = PKT_item_change_info(reader)
	checkErr(err)

	return
}

type match_user struct {
	F_userid      uint64
	F_icon        uint32
	F_nick        string
	F_integral    int32
	F_ships       []warship_info
	F_accessories []accessories_info
}

func (p match_user) Pack(w *packet.Packet) {
	w.WriteU64(p.F_userid)
	w.WriteU32(p.F_icon)
	w.WriteString(p.F_nick)
	w.WriteS32(p.F_integral)
	w.WriteU16(uint16(len(p.F_ships)))
	for k := range p.F_ships {
		p.F_ships[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_accessories)))
	for k := range p.F_accessories {
		p.F_accessories[k].Pack(w)
	}
}

func PKT_match_user(reader *packet.Packet) (tbl match_user, err error) {
	tbl.F_userid, err = reader.ReadU64()
	checkErr(err)

	tbl.F_icon, err = reader.ReadU32()
	checkErr(err)

	tbl.F_nick, err = reader.ReadString()
	checkErr(err)

	tbl.F_integral, err = reader.ReadS32()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_ships = make([]warship_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_ships[i], err = PKT_warship_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_accessories = make([]accessories_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_accessories[i], err = PKT_accessories_info(reader)
			checkErr(err)
		}
	}

	return
}

type match_info struct {
	F_addr    string
	F_players []match_user
	F_nonce   uint64
	F_token   []byte
}

func (p match_info) Pack(w *packet.Packet) {
	w.WriteString(p.F_addr)
	w.WriteU16(uint16(len(p.F_players)))
	for k := range p.F_players {
		p.F_players[k].Pack(w)
	}
	w.WriteU64(p.F_nonce)
	w.WriteBytes(p.F_token)
}

func PKT_match_info(reader *packet.Packet) (tbl match_info, err error) {
	tbl.F_addr, err = reader.ReadString()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_players = make([]match_user, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_players[i], err = PKT_match_user(reader)
			checkErr(err)
		}
	}

	tbl.F_nonce, err = reader.ReadU64()
	checkErr(err)

	tbl.F_token, err = reader.ReadBytes()
	checkErr(err)

	return
}

type pvp_report struct {
	F_vector     bool
	F_integral   int32
	F_itemchange item_change_info
}

func (p pvp_report) Pack(w *packet.Packet) {
	w.WriteBool(p.F_vector)
	w.WriteS32(p.F_integral)
	p.F_itemchange.Pack(w)
}

func PKT_pvp_report(reader *packet.Packet) (tbl pvp_report, err error) {
	tbl.F_vector, err = reader.ReadBool()
	checkErr(err)

	tbl.F_integral, err = reader.ReadS32()
	checkErr(err)

	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	return
}

type pvp_replay struct {
	F_players []match_user
	F_replay  [][]byte
}

func (p pvp_replay) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_players)))
	for k := range p.F_players {
		p.F_players[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_replay)))
	for k := range p.F_replay {
		w.WriteBytes(p.F_replay[k])
	}
}

func PKT_pvp_replay(reader *packet.Packet) (tbl pvp_replay, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_players = make([]match_user, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_players[i], err = PKT_match_user(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadBytes()
			tbl.F_replay = append(tbl.F_replay, v)
			checkErr(err)
		}
	}

	return
}

type skill_stage_upgrade_info struct {
	F_shipId  uint64
	F_skillId string
}

func (p skill_stage_upgrade_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_shipId)
	w.WriteString(p.F_skillId)
}

func PKT_skill_stage_upgrade_info(reader *packet.Packet) (tbl skill_stage_upgrade_info, err error) {
	tbl.F_shipId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_skillId, err = reader.ReadString()
	checkErr(err)

	return
}

type skill_stage_upgrade_resp struct {
	F_shipid     uint64
	F_skillId    string
	F_stage      uint8
	F_itemChange item_change_info
}

func (p skill_stage_upgrade_resp) Pack(w *packet.Packet) {
	w.WriteU64(p.F_shipid)
	w.WriteString(p.F_skillId)
	w.WriteByte(p.F_stage)
	p.F_itemChange.Pack(w)
}

func PKT_skill_stage_upgrade_resp(reader *packet.Packet) (tbl skill_stage_upgrade_resp, err error) {
	tbl.F_shipid, err = reader.ReadU64()
	checkErr(err)

	tbl.F_skillId, err = reader.ReadString()
	checkErr(err)

	tbl.F_stage, err = reader.ReadByte()
	checkErr(err)

	tbl.F_itemChange, err = PKT_item_change_info(reader)
	checkErr(err)

	return
}

type buy_info struct {
	F_id  uint32
	F_num int32
}

func (p buy_info) Pack(w *packet.Packet) {
	w.WriteU32(p.F_id)
	w.WriteS32(p.F_num)
}

func PKT_buy_info(reader *packet.Packet) (tbl buy_info, err error) {
	tbl.F_id, err = reader.ReadU32()
	checkErr(err)

	tbl.F_num, err = reader.ReadS32()
	checkErr(err)

	return
}

type shop_info struct {
	F_id  uint32
	F_num int32
}

func (p shop_info) Pack(w *packet.Packet) {
	w.WriteU32(p.F_id)
	w.WriteS32(p.F_num)
}

func PKT_shop_info(reader *packet.Packet) (tbl shop_info, err error) {
	tbl.F_id, err = reader.ReadU32()
	checkErr(err)

	tbl.F_num, err = reader.ReadS32()
	checkErr(err)

	return
}

type buy_resp struct {
	F_itemChange item_change_info
	F_shopInfo   shop_info
}

func (p buy_resp) Pack(w *packet.Packet) {
	p.F_itemChange.Pack(w)
	p.F_shopInfo.Pack(w)
}

func PKT_buy_resp(reader *packet.Packet) (tbl buy_resp, err error) {
	tbl.F_itemChange, err = PKT_item_change_info(reader)
	checkErr(err)

	tbl.F_shopInfo, err = PKT_shop_info(reader)
	checkErr(err)

	return
}

type shop_infos struct {
	F_infos []shop_info
}

func (p shop_infos) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_infos)))
	for k := range p.F_infos {
		p.F_infos[k].Pack(w)
	}
}

func PKT_shop_infos(reader *packet.Packet) (tbl shop_infos, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_infos = make([]shop_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_infos[i], err = PKT_shop_info(reader)
			checkErr(err)
		}
	}

	return
}

type ship_breakthrough struct {
	F_shipId    uint64
	F_resShipId uint64
}

func (p ship_breakthrough) Pack(w *packet.Packet) {
	w.WriteU64(p.F_shipId)
	w.WriteU64(p.F_resShipId)
}

func PKT_ship_breakthrough(reader *packet.Packet) (tbl ship_breakthrough, err error) {
	tbl.F_shipId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_resShipId, err = reader.ReadU64()
	checkErr(err)

	return
}

type ship_break_res struct {
	F_shipId       uint64
	F_resShipId    uint64
	F_breakthrough uint8
}

func (p ship_break_res) Pack(w *packet.Packet) {
	w.WriteU64(p.F_shipId)
	w.WriteU64(p.F_resShipId)
	w.WriteByte(p.F_breakthrough)
}

func PKT_ship_break_res(reader *packet.Packet) (tbl ship_break_res, err error) {
	tbl.F_shipId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_resShipId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_breakthrough, err = reader.ReadByte()
	checkErr(err)

	return
}

type videotape_id struct {
	F_id string
}

func (p videotape_id) Pack(w *packet.Packet) {
	w.WriteString(p.F_id)
}

func PKT_videotape_id(reader *packet.Packet) (tbl videotape_id, err error) {
	tbl.F_id, err = reader.ReadString()
	checkErr(err)

	return
}

type videotape_info struct {
	F_id      string
	F_context []byte
}

func (p videotape_info) Pack(w *packet.Packet) {
	w.WriteString(p.F_id)
	w.WriteU16(uint16(len(p.F_context)))
	for k := range p.F_context {
		w.WriteByte(p.F_context[k])
	}
}

func PKT_videotape_info(reader *packet.Packet) (tbl videotape_info, err error) {
	tbl.F_id, err = reader.ReadString()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadByte()
			tbl.F_context = append(tbl.F_context, v)
			checkErr(err)
		}
	}

	return
}

type query_mission_task_info struct {
	F_id uint32
}

func (p query_mission_task_info) Pack(w *packet.Packet) {
	w.WriteU32(p.F_id)
}

func PKT_query_mission_task_info(reader *packet.Packet) (tbl query_mission_task_info, err error) {
	tbl.F_id, err = reader.ReadU32()
	checkErr(err)

	return
}

type mission_task_info struct {
	F_id       uint32
	F_progress uint32
}

func (p mission_task_info) Pack(w *packet.Packet) {
	w.WriteU32(p.F_id)
	w.WriteU32(p.F_progress)
}

func PKT_mission_task_info(reader *packet.Packet) (tbl mission_task_info, err error) {
	tbl.F_id, err = reader.ReadU32()
	checkErr(err)

	tbl.F_progress, err = reader.ReadU32()
	checkErr(err)

	return
}

type mission_task_info_progress struct {
	F_type []mission_task_info
}

func (p mission_task_info_progress) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_type)))
	for k := range p.F_type {
		p.F_type[k].Pack(w)
	}
}

func PKT_mission_task_info_progress(reader *packet.Packet) (tbl mission_task_info_progress, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_type = make([]mission_task_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_type[i], err = PKT_mission_task_info(reader)
			checkErr(err)
		}
	}

	return
}

type random_levelpoint struct {
	F_id uint32
}

func (p random_levelpoint) Pack(w *packet.Packet) {
	w.WriteU32(p.F_id)
}

func PKT_random_levelpoint(reader *packet.Packet) (tbl random_levelpoint, err error) {
	tbl.F_id, err = reader.ReadU32()
	checkErr(err)

	return
}

type battle_group struct {
	F_teamId     uint8
	F_autoSupply bool
	F_pointId    uint32
}

func (p battle_group) Pack(w *packet.Packet) {
	w.WriteByte(p.F_teamId)
	w.WriteBool(p.F_autoSupply)
	w.WriteU32(p.F_pointId)
}

func PKT_battle_group(reader *packet.Packet) (tbl battle_group, err error) {
	tbl.F_teamId, err = reader.ReadByte()
	checkErr(err)

	tbl.F_autoSupply, err = reader.ReadBool()
	checkErr(err)

	tbl.F_pointId, err = reader.ReadU32()
	checkErr(err)

	return
}

type ship_res_info struct {
	F_id    uint64
	F_goods uint32
	F_fuel  uint32
}

func (p ship_res_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	w.WriteU32(p.F_goods)
	w.WriteU32(p.F_fuel)
}

func PKT_ship_res_info(reader *packet.Packet) (tbl ship_res_info, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_goods, err = reader.ReadU32()
	checkErr(err)

	tbl.F_fuel, err = reader.ReadU32()
	checkErr(err)

	return
}

type manual_supply struct {
	F_teamId  uint8
	F_pointId uint32
}

func (p manual_supply) Pack(w *packet.Packet) {
	w.WriteByte(p.F_teamId)
	w.WriteU32(p.F_pointId)
}

func PKT_manual_supply(reader *packet.Packet) (tbl manual_supply, err error) {
	tbl.F_teamId, err = reader.ReadByte()
	checkErr(err)

	tbl.F_pointId, err = reader.ReadU32()
	checkErr(err)

	return
}

type mission_save struct {
	F_FightingPoint uint32
	F_FoughtPoint   uint32
	F_RandomPoint   uint32
	F_PointPath     []uint32
	F_teamId        uint8
	F_autoSupply    bool
}

func (p mission_save) Pack(w *packet.Packet) {
	w.WriteU32(p.F_FightingPoint)
	w.WriteU32(p.F_FoughtPoint)
	w.WriteU32(p.F_RandomPoint)
	w.WriteU16(uint16(len(p.F_PointPath)))
	for k := range p.F_PointPath {
		w.WriteU32(p.F_PointPath[k])
	}
	w.WriteByte(p.F_teamId)
	w.WriteBool(p.F_autoSupply)
}

func PKT_mission_save(reader *packet.Packet) (tbl mission_save, err error) {
	tbl.F_FightingPoint, err = reader.ReadU32()
	checkErr(err)

	tbl.F_FoughtPoint, err = reader.ReadU32()
	checkErr(err)

	tbl.F_RandomPoint, err = reader.ReadU32()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadU32()
			tbl.F_PointPath = append(tbl.F_PointPath, v)
			checkErr(err)
		}
	}

	tbl.F_teamId, err = reader.ReadByte()
	checkErr(err)

	tbl.F_autoSupply, err = reader.ReadBool()
	checkErr(err)

	return
}

type warships_change_succeed struct {
	F_itemchange item_change_info
	F_warships   []warship_info
}

func (p warships_change_succeed) Pack(w *packet.Packet) {
	p.F_itemchange.Pack(w)
	w.WriteU16(uint16(len(p.F_warships)))
	for k := range p.F_warships {
		p.F_warships[k].Pack(w)
	}
}

func PKT_warships_change_succeed(reader *packet.Packet) (tbl warships_change_succeed, err error) {
	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_warships = make([]warship_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_warships[i], err = PKT_warship_info(reader)
			checkErr(err)
		}
	}

	return
}

type mission_task_item struct {
	F_id   uint32
	F_type []mission_task_info
}

func (p mission_task_item) Pack(w *packet.Packet) {
	w.WriteU32(p.F_id)
	w.WriteU16(uint16(len(p.F_type)))
	for k := range p.F_type {
		p.F_type[k].Pack(w)
	}
}

func PKT_mission_task_item(reader *packet.Packet) (tbl mission_task_item, err error) {
	tbl.F_id, err = reader.ReadU32()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_type = make([]mission_task_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_type[i], err = PKT_mission_task_info(reader)
			checkErr(err)
		}
	}

	return
}

type battle_mission_task struct {
	F_type []mission_task_item
}

func (p battle_mission_task) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_type)))
	for k := range p.F_type {
		p.F_type[k].Pack(w)
	}
}

func PKT_battle_mission_task(reader *packet.Packet) (tbl battle_mission_task, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_type = make([]mission_task_item, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_type[i], err = PKT_mission_task_item(reader)
			checkErr(err)
		}
	}

	return
}

type exp_increase struct {
	F_warship_id uint64
	F_expinc     uint32
}

func (p exp_increase) Pack(w *packet.Packet) {
	w.WriteU64(p.F_warship_id)
	w.WriteU32(p.F_expinc)
}

func PKT_exp_increase(reader *packet.Packet) (tbl exp_increase, err error) {
	tbl.F_warship_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_expinc, err = reader.ReadU32()
	checkErr(err)

	return
}

type warship_exp_increase struct {
	F_item []exp_increase
}

func (p warship_exp_increase) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_item)))
	for k := range p.F_item {
		p.F_item[k].Pack(w)
	}
}

func PKT_warship_exp_increase(reader *packet.Packet) (tbl warship_exp_increase, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_item = make([]exp_increase, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_item[i], err = PKT_exp_increase(reader)
			checkErr(err)
		}
	}

	return
}

type plot_id struct {
	F_id uint16
}

func (p plot_id) Pack(w *packet.Packet) {
	w.WriteU16(p.F_id)
}

func PKT_plot_id(reader *packet.Packet) (tbl plot_id, err error) {
	tbl.F_id, err = reader.ReadU16()
	checkErr(err)

	return
}

type plot_info struct {
	F_id  uint16
	F_num uint16
}

func (p plot_info) Pack(w *packet.Packet) {
	w.WriteU16(p.F_id)
	w.WriteU16(p.F_num)
}

func PKT_plot_info(reader *packet.Packet) (tbl plot_info, err error) {
	tbl.F_id, err = reader.ReadU16()
	checkErr(err)

	tbl.F_num, err = reader.ReadU16()
	checkErr(err)

	return
}

type plot_list struct {
	F_id []plot_info
}

func (p plot_list) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_id)))
	for k := range p.F_id {
		p.F_id[k].Pack(w)
	}
}

func PKT_plot_list(reader *packet.Packet) (tbl plot_list, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_id = make([]plot_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_id[i], err = PKT_plot_info(reader)
			checkErr(err)
		}
	}

	return
}

type battle_task_info struct {
	F_result      bool
	F_common_ship int32
	F_boss_ship   int32
	F_airplane    int32
}

func (p battle_task_info) Pack(w *packet.Packet) {
	w.WriteBool(p.F_result)
	w.WriteS32(p.F_common_ship)
	w.WriteS32(p.F_boss_ship)
	w.WriteS32(p.F_airplane)
}

func PKT_battle_task_info(reader *packet.Packet) (tbl battle_task_info, err error) {
	tbl.F_result, err = reader.ReadBool()
	checkErr(err)

	tbl.F_common_ship, err = reader.ReadS32()
	checkErr(err)

	tbl.F_boss_ship, err = reader.ReadS32()
	checkErr(err)

	tbl.F_airplane, err = reader.ReadS32()
	checkErr(err)

	return
}

type response struct {
	F_result bool
}

func (p response) Pack(w *packet.Packet) {
	w.WriteBool(p.F_result)
}

func PKT_response(reader *packet.Packet) (tbl response, err error) {
	tbl.F_result, err = reader.ReadBool()
	checkErr(err)

	return
}

type homeworld_seaside_list struct {
	F_id []uint8
}

func (p homeworld_seaside_list) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_id)))
	for k := range p.F_id {
		w.WriteByte(p.F_id[k])
	}
}

func PKT_homeworld_seaside_list(reader *packet.Packet) (tbl homeworld_seaside_list, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadByte()
			tbl.F_id = append(tbl.F_id, v)
			checkErr(err)
		}
	}

	return
}

type homeworld_avatar struct {
	F_warship_id uint32
	F_id         uint8
	F_status     bool
}

func (p homeworld_avatar) Pack(w *packet.Packet) {
	w.WriteU32(p.F_warship_id)
	w.WriteByte(p.F_id)
	w.WriteBool(p.F_status)
}

func PKT_homeworld_avatar(reader *packet.Packet) (tbl homeworld_avatar, err error) {
	tbl.F_warship_id, err = reader.ReadU32()
	checkErr(err)

	tbl.F_id, err = reader.ReadByte()
	checkErr(err)

	tbl.F_status, err = reader.ReadBool()
	checkErr(err)

	return
}

type homeworld_avatar_list struct {
	F_avatar_list []homeworld_avatar
}

func (p homeworld_avatar_list) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_avatar_list)))
	for k := range p.F_avatar_list {
		p.F_avatar_list[k].Pack(w)
	}
}

func PKT_homeworld_avatar_list(reader *packet.Packet) (tbl homeworld_avatar_list, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_avatar_list = make([]homeworld_avatar, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_avatar_list[i], err = PKT_homeworld_avatar(reader)
			checkErr(err)
		}
	}

	return
}

type homeworld_furniture struct {
	F_uuid  uint32
	F_id    uint32
	F_x     uint16
	F_y     uint16
	F_angle uint8
}

func (p homeworld_furniture) Pack(w *packet.Packet) {
	w.WriteU32(p.F_uuid)
	w.WriteU32(p.F_id)
	w.WriteU16(p.F_x)
	w.WriteU16(p.F_y)
	w.WriteByte(p.F_angle)
}

func PKT_homeworld_furniture(reader *packet.Packet) (tbl homeworld_furniture, err error) {
	tbl.F_uuid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_id, err = reader.ReadU32()
	checkErr(err)

	tbl.F_x, err = reader.ReadU16()
	checkErr(err)

	tbl.F_y, err = reader.ReadU16()
	checkErr(err)

	tbl.F_angle, err = reader.ReadByte()
	checkErr(err)

	return
}

type homeworld_furniture_list struct {
	F_furniture []homeworld_furniture
}

func (p homeworld_furniture_list) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_furniture)))
	for k := range p.F_furniture {
		p.F_furniture[k].Pack(w)
	}
}

func PKT_homeworld_furniture_list(reader *packet.Packet) (tbl homeworld_furniture_list, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_furniture = make([]homeworld_furniture, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_furniture[i], err = PKT_homeworld_furniture(reader)
			checkErr(err)
		}
	}

	return
}

type seaside_id struct {
	F_id uint8
}

func (p seaside_id) Pack(w *packet.Packet) {
	w.WriteByte(p.F_id)
}

func PKT_seaside_id(reader *packet.Packet) (tbl seaside_id, err error) {
	tbl.F_id, err = reader.ReadByte()
	checkErr(err)

	return
}

type furniture struct {
	F_id  uint32
	F_num int32
}

func (p furniture) Pack(w *packet.Packet) {
	w.WriteU32(p.F_id)
	w.WriteS32(p.F_num)
}

func PKT_furniture(reader *packet.Packet) (tbl furniture, err error) {
	tbl.F_id, err = reader.ReadU32()
	checkErr(err)

	tbl.F_num, err = reader.ReadS32()
	checkErr(err)

	return
}

type furniture_list struct {
	F_furniture_info []furniture
}

func (p furniture_list) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_furniture_info)))
	for k := range p.F_furniture_info {
		p.F_furniture_info[k].Pack(w)
	}
}

func PKT_furniture_list(reader *packet.Packet) (tbl furniture_list, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_furniture_info = make([]furniture, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_furniture_info[i], err = PKT_furniture(reader)
			checkErr(err)
		}
	}

	return
}

type shipbookstatusinfo struct {
	F_id  uint16
	F_pos []uint16
}

func (p shipbookstatusinfo) Pack(w *packet.Packet) {
	w.WriteU16(p.F_id)
	w.WriteU16(uint16(len(p.F_pos)))
	for k := range p.F_pos {
		w.WriteU16(p.F_pos[k])
	}
}

func PKT_shipbookstatusinfo(reader *packet.Packet) (tbl shipbookstatusinfo, err error) {
	tbl.F_id, err = reader.ReadU16()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadU16()
			tbl.F_pos = append(tbl.F_pos, v)
			checkErr(err)
		}
	}

	return
}

type put_furniture struct {
	F_id    uint32
	F_scene uint8
	F_x     uint16
	F_y     uint16
	F_angle uint8
}

func (p put_furniture) Pack(w *packet.Packet) {
	w.WriteU32(p.F_id)
	w.WriteByte(p.F_scene)
	w.WriteU16(p.F_x)
	w.WriteU16(p.F_y)
	w.WriteByte(p.F_angle)
}

func PKT_put_furniture(reader *packet.Packet) (tbl put_furniture, err error) {
	tbl.F_id, err = reader.ReadU32()
	checkErr(err)

	tbl.F_scene, err = reader.ReadByte()
	checkErr(err)

	tbl.F_x, err = reader.ReadU16()
	checkErr(err)

	tbl.F_y, err = reader.ReadU16()
	checkErr(err)

	tbl.F_angle, err = reader.ReadByte()
	checkErr(err)

	return
}

type remove_furniture struct {
	F_uid   uint32
	F_scene uint8
}

func (p remove_furniture) Pack(w *packet.Packet) {
	w.WriteU32(p.F_uid)
	w.WriteByte(p.F_scene)
}

func PKT_remove_furniture(reader *packet.Packet) (tbl remove_furniture, err error) {
	tbl.F_uid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_scene, err = reader.ReadByte()
	checkErr(err)

	return
}

type modify_furniture struct {
	F_uid   uint32
	F_scene uint8
	F_x     uint16
	F_y     uint16
	F_angle uint8
}

func (p modify_furniture) Pack(w *packet.Packet) {
	w.WriteU32(p.F_uid)
	w.WriteByte(p.F_scene)
	w.WriteU16(p.F_x)
	w.WriteU16(p.F_y)
	w.WriteByte(p.F_angle)
}

func PKT_modify_furniture(reader *packet.Packet) (tbl modify_furniture, err error) {
	tbl.F_uid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_scene, err = reader.ReadByte()
	checkErr(err)

	tbl.F_x, err = reader.ReadU16()
	checkErr(err)

	tbl.F_y, err = reader.ReadU16()
	checkErr(err)

	tbl.F_angle, err = reader.ReadByte()
	checkErr(err)

	return
}

type uid struct {
	F_id uint64
}

func (p uid) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
}

func PKT_uid(reader *packet.Packet) (tbl uid, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	return
}

type modify_seaside_avatar struct {
	F_warship_id uint32
	F_scene      uint8
}

func (p modify_seaside_avatar) Pack(w *packet.Packet) {
	w.WriteU32(p.F_warship_id)
	w.WriteByte(p.F_scene)
}

func PKT_modify_seaside_avatar(reader *packet.Packet) (tbl modify_seaside_avatar, err error) {
	tbl.F_warship_id, err = reader.ReadU32()
	checkErr(err)

	tbl.F_scene, err = reader.ReadByte()
	checkErr(err)

	return
}

type modify_seaside_avatar_req_struct struct {
	F_items []modify_seaside_avatar
}

func (p modify_seaside_avatar_req_struct) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_items)))
	for k := range p.F_items {
		p.F_items[k].Pack(w)
	}
}

func PKT_modify_seaside_avatar_req_struct(reader *packet.Packet) (tbl modify_seaside_avatar_req_struct, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_items = make([]modify_seaside_avatar, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_items[i], err = PKT_modify_seaside_avatar(reader)
			checkErr(err)
		}
	}

	return
}

type place_furniture_list_req_struct struct {
	F_items []put_furniture
}

func (p place_furniture_list_req_struct) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_items)))
	for k := range p.F_items {
		p.F_items[k].Pack(w)
	}
}

func PKT_place_furniture_list_req_struct(reader *packet.Packet) (tbl place_furniture_list_req_struct, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_items = make([]put_furniture, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_items[i], err = PKT_put_furniture(reader)
			checkErr(err)
		}
	}

	return
}

type furniture_uid struct {
	F_tid uint32
	F_uid uint32
}

func (p furniture_uid) Pack(w *packet.Packet) {
	w.WriteU32(p.F_tid)
	w.WriteU32(p.F_uid)
}

func PKT_furniture_uid(reader *packet.Packet) (tbl furniture_uid, err error) {
	tbl.F_tid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_uid, err = reader.ReadU32()
	checkErr(err)

	return
}

type place_furniture_list_ack_struct struct {
	F_items []furniture_uid
}

func (p place_furniture_list_ack_struct) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_items)))
	for k := range p.F_items {
		p.F_items[k].Pack(w)
	}
}

func PKT_place_furniture_list_ack_struct(reader *packet.Packet) (tbl place_furniture_list_ack_struct, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_items = make([]furniture_uid, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_items[i], err = PKT_furniture_uid(reader)
			checkErr(err)
		}
	}

	return
}

type recover_furniture_list_req_struct struct {
	F_items []remove_furniture
}

func (p recover_furniture_list_req_struct) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_items)))
	for k := range p.F_items {
		p.F_items[k].Pack(w)
	}
}

func PKT_recover_furniture_list_req_struct(reader *packet.Packet) (tbl recover_furniture_list_req_struct, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_items = make([]remove_furniture, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_items[i], err = PKT_remove_furniture(reader)
			checkErr(err)
		}
	}

	return
}

type modify_furniture_list_req_struct struct {
	F_items []modify_furniture
}

func (p modify_furniture_list_req_struct) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_items)))
	for k := range p.F_items {
		p.F_items[k].Pack(w)
	}
}

func PKT_modify_furniture_list_req_struct(reader *packet.Packet) (tbl modify_furniture_list_req_struct, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_items = make([]modify_furniture, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_items[i], err = PKT_modify_furniture(reader)
			checkErr(err)
		}
	}

	return
}

type receive_favorability_req_struct struct {
	F_id uint32
}

func (p receive_favorability_req_struct) Pack(w *packet.Packet) {
	w.WriteU32(p.F_id)
}

func PKT_receive_favorability_req_struct(reader *packet.Packet) (tbl receive_favorability_req_struct, err error) {
	tbl.F_id, err = reader.ReadU32()
	checkErr(err)

	return
}

type homeworld_acc struct {
	F_tid   uint32
	F_uid   uint32
	F_x     uint16
	F_y     uint16
	F_angle uint8
}

func (p homeworld_acc) Pack(w *packet.Packet) {
	w.WriteU32(p.F_tid)
	w.WriteU32(p.F_uid)
	w.WriteU16(p.F_x)
	w.WriteU16(p.F_y)
	w.WriteByte(p.F_angle)
}

func PKT_homeworld_acc(reader *packet.Packet) (tbl homeworld_acc, err error) {
	tbl.F_tid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_uid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_x, err = reader.ReadU16()
	checkErr(err)

	tbl.F_y, err = reader.ReadU16()
	checkErr(err)

	tbl.F_angle, err = reader.ReadByte()
	checkErr(err)

	return
}

type homeworld_modify_furniture struct {
	F_scene      uint8
	F_remove_uid []uint32
	F_put        []homeworld_acc
	F_modify     []homeworld_acc
}

func (p homeworld_modify_furniture) Pack(w *packet.Packet) {
	w.WriteByte(p.F_scene)
	w.WriteU16(uint16(len(p.F_remove_uid)))
	for k := range p.F_remove_uid {
		w.WriteU32(p.F_remove_uid[k])
	}
	w.WriteU16(uint16(len(p.F_put)))
	for k := range p.F_put {
		p.F_put[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_modify)))
	for k := range p.F_modify {
		p.F_modify[k].Pack(w)
	}
}

func PKT_homeworld_modify_furniture(reader *packet.Packet) (tbl homeworld_modify_furniture, err error) {
	tbl.F_scene, err = reader.ReadByte()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadU32()
			tbl.F_remove_uid = append(tbl.F_remove_uid, v)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_put = make([]homeworld_acc, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_put[i], err = PKT_homeworld_acc(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_modify = make([]homeworld_acc, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_modify[i], err = PKT_homeworld_acc(reader)
			checkErr(err)
		}
	}

	return
}

type server_time struct {
	F_time int64
}

func (p server_time) Pack(w *packet.Packet) {
	w.WriteS64(p.F_time)
}

func PKT_server_time(reader *packet.Packet) (tbl server_time, err error) {
	tbl.F_time, err = reader.ReadS64()
	checkErr(err)

	return
}

type warzone_unlock struct {
	F_id []uint32
}

func (p warzone_unlock) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_id)))
	for k := range p.F_id {
		w.WriteU32(p.F_id[k])
	}
}

func PKT_warzone_unlock(reader *packet.Packet) (tbl warzone_unlock, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadU32()
			tbl.F_id = append(tbl.F_id, v)
			checkErr(err)
		}
	}

	return
}

type warzone_id struct {
	F_id uint32
}

func (p warzone_id) Pack(w *packet.Packet) {
	w.WriteU32(p.F_id)
}

func PKT_warzone_id(reader *packet.Packet) (tbl warzone_id, err error) {
	tbl.F_id, err = reader.ReadU32()
	checkErr(err)

	return
}

type warzone_task struct {
	F_pos  uint8
	F_task uint32
	F_team uint8
	F_time int64
}

func (p warzone_task) Pack(w *packet.Packet) {
	w.WriteByte(p.F_pos)
	w.WriteU32(p.F_task)
	w.WriteByte(p.F_team)
	w.WriteS64(p.F_time)
}

func PKT_warzone_task(reader *packet.Packet) (tbl warzone_task, err error) {
	tbl.F_pos, err = reader.ReadByte()
	checkErr(err)

	tbl.F_task, err = reader.ReadU32()
	checkErr(err)

	tbl.F_team, err = reader.ReadByte()
	checkErr(err)

	tbl.F_time, err = reader.ReadS64()
	checkErr(err)

	return
}

type warzone_info struct {
	F_warzone_id uint32
	F_task_info  []warzone_task
}

func (p warzone_info) Pack(w *packet.Packet) {
	w.WriteU32(p.F_warzone_id)
	w.WriteU16(uint16(len(p.F_task_info)))
	for k := range p.F_task_info {
		p.F_task_info[k].Pack(w)
	}
}

func PKT_warzone_info(reader *packet.Packet) (tbl warzone_info, err error) {
	tbl.F_warzone_id, err = reader.ReadU32()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_task_info = make([]warzone_task, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_task_info[i], err = PKT_warzone_task(reader)
			checkErr(err)
		}
	}

	return
}

type execute_warzone_task struct {
	F_warzone_id uint32
	F_pos        uint8
	F_team       uint8
}

func (p execute_warzone_task) Pack(w *packet.Packet) {
	w.WriteU32(p.F_warzone_id)
	w.WriteByte(p.F_pos)
	w.WriteByte(p.F_team)
}

func PKT_execute_warzone_task(reader *packet.Packet) (tbl execute_warzone_task, err error) {
	tbl.F_warzone_id, err = reader.ReadU32()
	checkErr(err)

	tbl.F_pos, err = reader.ReadByte()
	checkErr(err)

	tbl.F_team, err = reader.ReadByte()
	checkErr(err)

	return
}

type teamId struct {
	F_Id uint8
}

func (p teamId) Pack(w *packet.Packet) {
	w.WriteByte(p.F_Id)
}

func PKT_teamId(reader *packet.Packet) (tbl teamId, err error) {
	tbl.F_Id, err = reader.ReadByte()
	checkErr(err)

	return
}

type GroupTeamID struct {
	F_Id []uint8
}

func (p GroupTeamID) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_Id)))
	for k := range p.F_Id {
		w.WriteByte(p.F_Id[k])
	}
}

func PKT_GroupTeamID(reader *packet.Packet) (tbl GroupTeamID, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadByte()
			tbl.F_Id = append(tbl.F_Id, v)
			checkErr(err)
		}
	}

	return
}

type expedition_reward struct {
	F_teamId     uint8
	F_special    bool
	F_item       item_change_info
	F_warzone_id uint32
	F_pos        uint8
	F_newTask    uint32
}

func (p expedition_reward) Pack(w *packet.Packet) {
	w.WriteByte(p.F_teamId)
	w.WriteBool(p.F_special)
	p.F_item.Pack(w)
	w.WriteU32(p.F_warzone_id)
	w.WriteByte(p.F_pos)
	w.WriteU32(p.F_newTask)
}

func PKT_expedition_reward(reader *packet.Packet) (tbl expedition_reward, err error) {
	tbl.F_teamId, err = reader.ReadByte()
	checkErr(err)

	tbl.F_special, err = reader.ReadBool()
	checkErr(err)

	tbl.F_item, err = PKT_item_change_info(reader)
	checkErr(err)

	tbl.F_warzone_id, err = reader.ReadU32()
	checkErr(err)

	tbl.F_pos, err = reader.ReadByte()
	checkErr(err)

	tbl.F_newTask, err = reader.ReadU32()
	checkErr(err)

	return
}

type checkIn_id struct {
	F_id uint16
}

func (p checkIn_id) Pack(w *packet.Packet) {
	w.WriteU16(p.F_id)
}

func PKT_checkIn_id(reader *packet.Packet) (tbl checkIn_id, err error) {
	tbl.F_id, err = reader.ReadU16()
	checkErr(err)

	return
}

type activityinfo struct {
	F_finishactivityinfo  []activity
	F_runningactivityinfo []activity
}

func (p activityinfo) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_finishactivityinfo)))
	for k := range p.F_finishactivityinfo {
		p.F_finishactivityinfo[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_runningactivityinfo)))
	for k := range p.F_runningactivityinfo {
		p.F_runningactivityinfo[k].Pack(w)
	}
}

func PKT_activityinfo(reader *packet.Packet) (tbl activityinfo, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_finishactivityinfo = make([]activity, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_finishactivityinfo[i], err = PKT_activity(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_runningactivityinfo = make([]activity, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_runningactivityinfo[i], err = PKT_activity(reader)
			checkErr(err)
		}
	}

	return
}

type activity struct {
	F_activityId  uint32
	F_status      bool
	F_progress    int8
	F_finishtime  int64
	F_sevenstatus []uint8
	F_logindays   uint16
}

func (p activity) Pack(w *packet.Packet) {
	w.WriteU32(p.F_activityId)
	w.WriteBool(p.F_status)
	w.WriteS8(p.F_progress)
	w.WriteS64(p.F_finishtime)
	w.WriteU16(uint16(len(p.F_sevenstatus)))
	for k := range p.F_sevenstatus {
		w.WriteByte(p.F_sevenstatus[k])
	}
	w.WriteU16(p.F_logindays)
}

func PKT_activity(reader *packet.Packet) (tbl activity, err error) {
	tbl.F_activityId, err = reader.ReadU32()
	checkErr(err)

	tbl.F_status, err = reader.ReadBool()
	checkErr(err)

	tbl.F_progress, err = reader.ReadS8()
	checkErr(err)

	tbl.F_finishtime, err = reader.ReadS64()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadByte()
			tbl.F_sevenstatus = append(tbl.F_sevenstatus, v)
			checkErr(err)
		}
	}

	tbl.F_logindays, err = reader.ReadU16()
	checkErr(err)

	return
}

type activity_info struct {
	F_activityId uint32
	F_index      uint8
}

func (p activity_info) Pack(w *packet.Packet) {
	w.WriteU32(p.F_activityId)
	w.WriteByte(p.F_index)
}

func PKT_activity_info(reader *packet.Packet) (tbl activity_info, err error) {
	tbl.F_activityId, err = reader.ReadU32()
	checkErr(err)

	tbl.F_index, err = reader.ReadByte()
	checkErr(err)

	return
}

type favorability_info struct {
	F_tid          uint64
	F_favorability float32
}

func (p favorability_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_tid)
	w.WriteFloat32(p.F_favorability)
}

func PKT_favorability_info(reader *packet.Packet) (tbl favorability_info, err error) {
	tbl.F_tid, err = reader.ReadU64()
	checkErr(err)

	tbl.F_favorability, err = reader.ReadFloat32()
	checkErr(err)

	return
}

type ship_favorability struct {
	F_item     []favorability_info
	F_warships []warship_info
}

func (p ship_favorability) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_item)))
	for k := range p.F_item {
		p.F_item[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_warships)))
	for k := range p.F_warships {
		p.F_warships[k].Pack(w)
	}
}

func PKT_ship_favorability(reader *packet.Packet) (tbl ship_favorability, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_item = make([]favorability_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_item[i], err = PKT_favorability_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_warships = make([]warship_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_warships[i], err = PKT_warship_info(reader)
			checkErr(err)
		}
	}

	return
}

type cancel_expedition_task struct {
	F_warzone_id uint32
	F_pos        uint8
	F_team_id    uint8
}

func (p cancel_expedition_task) Pack(w *packet.Packet) {
	w.WriteU32(p.F_warzone_id)
	w.WriteByte(p.F_pos)
	w.WriteByte(p.F_team_id)
}

func PKT_cancel_expedition_task(reader *packet.Packet) (tbl cancel_expedition_task, err error) {
	tbl.F_warzone_id, err = reader.ReadU32()
	checkErr(err)

	tbl.F_pos, err = reader.ReadByte()
	checkErr(err)

	tbl.F_team_id, err = reader.ReadByte()
	checkErr(err)

	return
}

type update_expedition_task struct {
	F_warzone_id uint32
	F_pos        uint8
	F_task_id    uint32
	F_team_id    uint8
}

func (p update_expedition_task) Pack(w *packet.Packet) {
	w.WriteU32(p.F_warzone_id)
	w.WriteByte(p.F_pos)
	w.WriteU32(p.F_task_id)
	w.WriteByte(p.F_team_id)
}

func PKT_update_expedition_task(reader *packet.Packet) (tbl update_expedition_task, err error) {
	tbl.F_warzone_id, err = reader.ReadU32()
	checkErr(err)

	tbl.F_pos, err = reader.ReadByte()
	checkErr(err)

	tbl.F_task_id, err = reader.ReadU32()
	checkErr(err)

	tbl.F_team_id, err = reader.ReadByte()
	checkErr(err)

	return
}

type battle_save struct {
	F_str string
}

func (p battle_save) Pack(w *packet.Packet) {
	w.WriteString(p.F_str)
}

func PKT_battle_save(reader *packet.Packet) (tbl battle_save, err error) {
	tbl.F_str, err = reader.ReadString()
	checkErr(err)

	return
}

type user_name struct {
	F_name string
}

func (p user_name) Pack(w *packet.Packet) {
	w.WriteString(p.F_name)
}

func PKT_user_name(reader *packet.Packet) (tbl user_name, err error) {
	tbl.F_name, err = reader.ReadString()
	checkErr(err)

	return
}

type friend_info struct {
	F_id            uint64
	F_nickName      string
	F_headIcon      uint32
	F_playerRiseExp int32
	F_lastLoginTime int64
	F_status        bool
	F_friendStatus  uint8
}

func (p friend_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	w.WriteString(p.F_nickName)
	w.WriteU32(p.F_headIcon)
	w.WriteS32(p.F_playerRiseExp)
	w.WriteS64(p.F_lastLoginTime)
	w.WriteBool(p.F_status)
	w.WriteByte(p.F_friendStatus)
}

func PKT_friend_info(reader *packet.Packet) (tbl friend_info, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_nickName, err = reader.ReadString()
	checkErr(err)

	tbl.F_headIcon, err = reader.ReadU32()
	checkErr(err)

	tbl.F_playerRiseExp, err = reader.ReadS32()
	checkErr(err)

	tbl.F_lastLoginTime, err = reader.ReadS64()
	checkErr(err)

	tbl.F_status, err = reader.ReadBool()
	checkErr(err)

	tbl.F_friendStatus, err = reader.ReadByte()
	checkErr(err)

	return
}

type all_friend_info struct {
	F_friendInfo []friend_info
}

func (p all_friend_info) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_friendInfo)))
	for k := range p.F_friendInfo {
		p.F_friendInfo[k].Pack(w)
	}
}

func PKT_all_friend_info(reader *packet.Packet) (tbl all_friend_info, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_friendInfo = make([]friend_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_friendInfo[i], err = PKT_friend_info(reader)
			checkErr(err)
		}
	}

	return
}

type friend_gift struct {
	F_restRoomId uint8
	F_friendId   uint64
}

func (p friend_gift) Pack(w *packet.Packet) {
	w.WriteByte(p.F_restRoomId)
	w.WriteU64(p.F_friendId)
}

func PKT_friend_gift(reader *packet.Packet) (tbl friend_gift, err error) {
	tbl.F_restRoomId, err = reader.ReadByte()
	checkErr(err)

	tbl.F_friendId, err = reader.ReadU64()
	checkErr(err)

	return
}

type friendinfo struct {
	F_friendId uint64
	F_gift     []dormgift_info
	F_roomid   uint8
}

func (p friendinfo) Pack(w *packet.Packet) {
	w.WriteU64(p.F_friendId)
	w.WriteU16(uint16(len(p.F_gift)))
	for k := range p.F_gift {
		p.F_gift[k].Pack(w)
	}
	w.WriteByte(p.F_roomid)
}

func PKT_friendinfo(reader *packet.Packet) (tbl friendinfo, err error) {
	tbl.F_friendId, err = reader.ReadU64()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_gift = make([]dormgift_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_gift[i], err = PKT_dormgift_info(reader)
			checkErr(err)
		}
	}

	tbl.F_roomid, err = reader.ReadByte()
	checkErr(err)

	return
}

type getGift struct {
	F_friendId uint64
	F_giftId   uint32
}

func (p getGift) Pack(w *packet.Packet) {
	w.WriteU64(p.F_friendId)
	w.WriteU32(p.F_giftId)
}

func PKT_getGift(reader *packet.Packet) (tbl getGift, err error) {
	tbl.F_friendId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_giftId, err = reader.ReadU32()
	checkErr(err)

	return
}

type get_friend_gift struct {
	F_itemchange item_change_info
}

func (p get_friend_gift) Pack(w *packet.Packet) {
	p.F_itemchange.Pack(w)
}

func PKT_get_friend_gift(reader *packet.Packet) (tbl get_friend_gift, err error) {
	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	return
}

type resv_gift struct {
	F_gift   []gift_info
	F_shipId uint64
}

func (p resv_gift) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_gift)))
	for k := range p.F_gift {
		p.F_gift[k].Pack(w)
	}
	w.WriteU64(p.F_shipId)
}

func PKT_resv_gift(reader *packet.Packet) (tbl resv_gift, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_gift = make([]gift_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_gift[i], err = PKT_gift_info(reader)
			checkErr(err)
		}
	}

	tbl.F_shipId, err = reader.ReadU64()
	checkErr(err)

	return
}

type gift_success_info struct {
	F_ship       warship_info
	F_itemchange item_change_info
}

func (p gift_success_info) Pack(w *packet.Packet) {
	p.F_ship.Pack(w)
	p.F_itemchange.Pack(w)
}

func PKT_gift_success_info(reader *packet.Packet) (tbl gift_success_info, err error) {
	tbl.F_ship, err = PKT_warship_info(reader)
	checkErr(err)

	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	return
}

type Message_info struct {
	F_friendId           uint64
	F_messageTime        int64
	F_message            string
	F_headIcon           uint32
	F_nickName           string
	F_leavemessagestatus bool
}

func (p Message_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_friendId)
	w.WriteS64(p.F_messageTime)
	w.WriteString(p.F_message)
	w.WriteU32(p.F_headIcon)
	w.WriteString(p.F_nickName)
	w.WriteBool(p.F_leavemessagestatus)
}

func PKT_Message_info(reader *packet.Packet) (tbl Message_info, err error) {
	tbl.F_friendId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_messageTime, err = reader.ReadS64()
	checkErr(err)

	tbl.F_message, err = reader.ReadString()
	checkErr(err)

	tbl.F_headIcon, err = reader.ReadU32()
	checkErr(err)

	tbl.F_nickName, err = reader.ReadString()
	checkErr(err)

	tbl.F_leavemessagestatus, err = reader.ReadBool()
	checkErr(err)

	return
}

type get_LeaveMessage_info struct {
	F_Messages         []Message_info
	F_leaveMessageNuum uint8
	F_id               uint64
}

func (p get_LeaveMessage_info) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_Messages)))
	for k := range p.F_Messages {
		p.F_Messages[k].Pack(w)
	}
	w.WriteByte(p.F_leaveMessageNuum)
	w.WriteU64(p.F_id)
}

func PKT_get_LeaveMessage_info(reader *packet.Packet) (tbl get_LeaveMessage_info, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_Messages = make([]Message_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_Messages[i], err = PKT_Message_info(reader)
			checkErr(err)
		}
	}

	tbl.F_leaveMessageNuum, err = reader.ReadByte()
	checkErr(err)

	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	return
}

type message struct {
	F_friendId uint64
	F_desc     string
}

func (p message) Pack(w *packet.Packet) {
	w.WriteU64(p.F_friendId)
	w.WriteString(p.F_desc)
}

func PKT_message(reader *packet.Packet) (tbl message, err error) {
	tbl.F_friendId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_desc, err = reader.ReadString()
	checkErr(err)

	return
}

type remove_friend_and_blacklist struct {
	F_friendUid    uint64
	F_friendStatus uint8
}

func (p remove_friend_and_blacklist) Pack(w *packet.Packet) {
	w.WriteU64(p.F_friendUid)
	w.WriteByte(p.F_friendStatus)
}

func PKT_remove_friend_and_blacklist(reader *packet.Packet) (tbl remove_friend_and_blacklist, err error) {
	tbl.F_friendUid, err = reader.ReadU64()
	checkErr(err)

	tbl.F_friendStatus, err = reader.ReadByte()
	checkErr(err)

	return
}

type npvp_match_info struct {
	F_constructions     []construction_info
	F_nickname          string
	F_baserating        int32
	F_level             int32
	F_headicon          uint32
	F_nPvPTicket        int32
	F_nPvPTicketRestore int64
	F_nPvPTimes         int32
}

func (p npvp_match_info) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_constructions)))
	for k := range p.F_constructions {
		p.F_constructions[k].Pack(w)
	}
	w.WriteString(p.F_nickname)
	w.WriteS32(p.F_baserating)
	w.WriteS32(p.F_level)
	w.WriteU32(p.F_headicon)
	w.WriteS32(p.F_nPvPTicket)
	w.WriteS64(p.F_nPvPTicketRestore)
	w.WriteS32(p.F_nPvPTimes)
}

func PKT_npvp_match_info(reader *packet.Packet) (tbl npvp_match_info, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_constructions = make([]construction_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_constructions[i], err = PKT_construction_info(reader)
			checkErr(err)
		}
	}

	tbl.F_nickname, err = reader.ReadString()
	checkErr(err)

	tbl.F_baserating, err = reader.ReadS32()
	checkErr(err)

	tbl.F_level, err = reader.ReadS32()
	checkErr(err)

	tbl.F_headicon, err = reader.ReadU32()
	checkErr(err)

	tbl.F_nPvPTicket, err = reader.ReadS32()
	checkErr(err)

	tbl.F_nPvPTicketRestore, err = reader.ReadS64()
	checkErr(err)

	tbl.F_nPvPTimes, err = reader.ReadS32()
	checkErr(err)

	return
}

type friend_team_dorm_info struct {
	F_id              uint64
	F_ships           []freindshipinfo
	F_defaultdormRoom uint8
}

func (p friend_team_dorm_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	w.WriteU16(uint16(len(p.F_ships)))
	for k := range p.F_ships {
		p.F_ships[k].Pack(w)
	}
	w.WriteByte(p.F_defaultdormRoom)
}

func PKT_friend_team_dorm_info(reader *packet.Packet) (tbl friend_team_dorm_info, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_ships = make([]freindshipinfo, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_ships[i], err = PKT_freindshipinfo(reader)
			checkErr(err)
		}
	}

	tbl.F_defaultdormRoom, err = reader.ReadByte()
	checkErr(err)

	return
}

type shipinfo struct {
	F_teamNo  uint8
	F_warship []freindshipinfo
}

func (p shipinfo) Pack(w *packet.Packet) {
	w.WriteByte(p.F_teamNo)
	w.WriteU16(uint16(len(p.F_warship)))
	for k := range p.F_warship {
		p.F_warship[k].Pack(w)
	}
}

func PKT_shipinfo(reader *packet.Packet) (tbl shipinfo, err error) {
	tbl.F_teamNo, err = reader.ReadByte()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_warship = make([]freindshipinfo, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_warship[i], err = PKT_freindshipinfo(reader)
			checkErr(err)
		}
	}

	return
}

type freindshipinfo struct {
	F_shipId  uint64
	F_shipTid int32
	F_shipLv  int32
	F_posId   uint8
}

func (p freindshipinfo) Pack(w *packet.Packet) {
	w.WriteU64(p.F_shipId)
	w.WriteS32(p.F_shipTid)
	w.WriteS32(p.F_shipLv)
	w.WriteByte(p.F_posId)
}

func PKT_freindshipinfo(reader *packet.Packet) (tbl freindshipinfo, err error) {
	tbl.F_shipId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_shipTid, err = reader.ReadS32()
	checkErr(err)

	tbl.F_shipLv, err = reader.ReadS32()
	checkErr(err)

	tbl.F_posId, err = reader.ReadByte()
	checkErr(err)

	return
}

type construction_change_succeed struct {
	F_itemchange    item_change_info
	F_constructions construction_info
}

func (p construction_change_succeed) Pack(w *packet.Packet) {
	p.F_itemchange.Pack(w)
	p.F_constructions.Pack(w)
}

func PKT_construction_change_succeed(reader *packet.Packet) (tbl construction_change_succeed, err error) {
	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	tbl.F_constructions, err = PKT_construction_info(reader)
	checkErr(err)

	return
}

type npvp_fight_enemy struct {
	F_teamId     uint8
	F_fightpoint uint8
}

func (p npvp_fight_enemy) Pack(w *packet.Packet) {
	w.WriteByte(p.F_teamId)
	w.WriteByte(p.F_fightpoint)
}

func PKT_npvp_fight_enemy(reader *packet.Packet) (tbl npvp_fight_enemy, err error) {
	tbl.F_teamId, err = reader.ReadByte()
	checkErr(err)

	tbl.F_fightpoint, err = reader.ReadByte()
	checkErr(err)

	return
}

type fight_construction struct {
	F_constructionId uint64
	F_constructionHp int32
}

func (p fight_construction) Pack(w *packet.Packet) {
	w.WriteU64(p.F_constructionId)
	w.WriteS32(p.F_constructionHp)
}

func PKT_fight_construction(reader *packet.Packet) (tbl fight_construction, err error) {
	tbl.F_constructionId, err = reader.ReadU64()
	checkErr(err)

	tbl.F_constructionHp, err = reader.ReadS32()
	checkErr(err)

	return
}

type fight_enemy_report struct {
	F_isAbandon bool
	F_teamId    uint8
	F_info_dura []warship_durability_info
	F_info_con  []fight_construction
	F_record    string
}

func (p fight_enemy_report) Pack(w *packet.Packet) {
	w.WriteBool(p.F_isAbandon)
	w.WriteByte(p.F_teamId)
	w.WriteU16(uint16(len(p.F_info_dura)))
	for k := range p.F_info_dura {
		p.F_info_dura[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_info_con)))
	for k := range p.F_info_con {
		p.F_info_con[k].Pack(w)
	}
	w.WriteString(p.F_record)
}

func PKT_fight_enemy_report(reader *packet.Packet) (tbl fight_enemy_report, err error) {
	tbl.F_isAbandon, err = reader.ReadBool()
	checkErr(err)

	tbl.F_teamId, err = reader.ReadByte()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_info_dura = make([]warship_durability_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_info_dura[i], err = PKT_warship_durability_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_info_con = make([]fight_construction, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_info_con[i], err = PKT_fight_construction(reader)
			checkErr(err)
		}
	}

	tbl.F_record, err = reader.ReadString()
	checkErr(err)

	return
}

type get_favo struct {
	F_id     uint64
	F_roomid uint8
}

func (p get_favo) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
	w.WriteByte(p.F_roomid)
}

func PKT_get_favo(reader *packet.Packet) (tbl get_favo, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	tbl.F_roomid, err = reader.ReadByte()
	checkErr(err)

	return
}

type offline_msg struct {
	F_msgs []msg
}

func (p offline_msg) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_msgs)))
	for k := range p.F_msgs {
		p.F_msgs[k].Pack(w)
	}
}

func PKT_offline_msg(reader *packet.Packet) (tbl offline_msg, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_msgs = make([]msg, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_msgs[i], err = PKT_msg(reader)
			checkErr(err)
		}
	}

	return
}

type npvp_result struct {
	F_star         uint8
	F_destroy_rate float32
}

func (p npvp_result) Pack(w *packet.Packet) {
	w.WriteByte(p.F_star)
	w.WriteFloat32(p.F_destroy_rate)
}

func PKT_npvp_result(reader *packet.Packet) (tbl npvp_result, err error) {
	tbl.F_star, err = reader.ReadByte()
	checkErr(err)

	tbl.F_destroy_rate, err = reader.ReadFloat32()
	checkErr(err)

	return
}

type npvp_playback struct {
	F_ships         []warship_info
	F_constructions []construction_info
	F_record        string
	F_formation     uint8
}

func (p npvp_playback) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_ships)))
	for k := range p.F_ships {
		p.F_ships[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_constructions)))
	for k := range p.F_constructions {
		p.F_constructions[k].Pack(w)
	}
	w.WriteString(p.F_record)
	w.WriteByte(p.F_formation)
}

func PKT_npvp_playback(reader *packet.Packet) (tbl npvp_playback, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_ships = make([]warship_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_ships[i], err = PKT_warship_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_constructions = make([]construction_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_constructions[i], err = PKT_construction_info(reader)
			checkErr(err)
		}
	}

	tbl.F_record, err = reader.ReadString()
	checkErr(err)

	tbl.F_formation, err = reader.ReadByte()
	checkErr(err)

	return
}

type npvp_ship_record struct {
	F_tid   int32
	F_level int32
}

func (p npvp_ship_record) Pack(w *packet.Packet) {
	w.WriteS32(p.F_tid)
	w.WriteS32(p.F_level)
}

func PKT_npvp_ship_record(reader *packet.Packet) (tbl npvp_ship_record, err error) {
	tbl.F_tid, err = reader.ReadS32()
	checkErr(err)

	tbl.F_level, err = reader.ReadS32()
	checkErr(err)

	return
}

type npvp_record struct {
	F_id           int64
	F_ships        []npvp_ship_record
	F_res          []res_change
	F_star         uint8
	F_destroy_rate float32
	F_nickname     string
}

func (p npvp_record) Pack(w *packet.Packet) {
	w.WriteS64(p.F_id)
	w.WriteU16(uint16(len(p.F_ships)))
	for k := range p.F_ships {
		p.F_ships[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_res)))
	for k := range p.F_res {
		p.F_res[k].Pack(w)
	}
	w.WriteByte(p.F_star)
	w.WriteFloat32(p.F_destroy_rate)
	w.WriteString(p.F_nickname)
}

func PKT_npvp_record(reader *packet.Packet) (tbl npvp_record, err error) {
	tbl.F_id, err = reader.ReadS64()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_ships = make([]npvp_ship_record, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_ships[i], err = PKT_npvp_ship_record(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_res = make([]res_change, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_res[i], err = PKT_res_change(reader)
			checkErr(err)
		}
	}

	tbl.F_star, err = reader.ReadByte()
	checkErr(err)

	tbl.F_destroy_rate, err = reader.ReadFloat32()
	checkErr(err)

	tbl.F_nickname, err = reader.ReadString()
	checkErr(err)

	return
}

type npvp_record_list struct {
	F_item []npvp_record
}

func (p npvp_record_list) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_item)))
	for k := range p.F_item {
		p.F_item[k].Pack(w)
	}
}

func PKT_npvp_record_list(reader *packet.Packet) (tbl npvp_record_list, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_item = make([]npvp_record, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_item[i], err = PKT_npvp_record(reader)
			checkErr(err)
		}
	}

	return
}

type npvp_playback_id struct {
	F_time int64
}

func (p npvp_playback_id) Pack(w *packet.Packet) {
	w.WriteS64(p.F_time)
}

func PKT_npvp_playback_id(reader *packet.Packet) (tbl npvp_playback_id, err error) {
	tbl.F_time, err = reader.ReadS64()
	checkErr(err)

	return
}

type query_enemy_status struct {
	F_result            bool
	F_baserating        int32
	F_nPvPTicket        int32
	F_nPvPTicketRestore int64
}

func (p query_enemy_status) Pack(w *packet.Packet) {
	w.WriteBool(p.F_result)
	w.WriteS32(p.F_baserating)
	w.WriteS32(p.F_nPvPTicket)
	w.WriteS64(p.F_nPvPTicketRestore)
}

func PKT_query_enemy_status(reader *packet.Packet) (tbl query_enemy_status, err error) {
	tbl.F_result, err = reader.ReadBool()
	checkErr(err)

	tbl.F_baserating, err = reader.ReadS32()
	checkErr(err)

	tbl.F_nPvPTicket, err = reader.ReadS32()
	checkErr(err)

	tbl.F_nPvPTicketRestore, err = reader.ReadS64()
	checkErr(err)

	return
}

type npvp_times struct {
	F_times int32
}

func (p npvp_times) Pack(w *packet.Packet) {
	w.WriteS32(p.F_times)
}

func PKT_npvp_times(reader *packet.Packet) (tbl npvp_times, err error) {
	tbl.F_times, err = reader.ReadS32()
	checkErr(err)

	return
}

type npvp_mail struct {
	F_tid     int32
	F_str     []string
	F_result  bool
	F_items   []item_info
	F_status  bool
	F_time_id int64
	F_time    string
}

func (p npvp_mail) Pack(w *packet.Packet) {
	w.WriteS32(p.F_tid)
	w.WriteU16(uint16(len(p.F_str)))
	for k := range p.F_str {
		w.WriteString(p.F_str[k])
	}
	w.WriteBool(p.F_result)
	w.WriteU16(uint16(len(p.F_items)))
	for k := range p.F_items {
		p.F_items[k].Pack(w)
	}
	w.WriteBool(p.F_status)
	w.WriteS64(p.F_time_id)
	w.WriteString(p.F_time)
}

func PKT_npvp_mail(reader *packet.Packet) (tbl npvp_mail, err error) {
	tbl.F_tid, err = reader.ReadS32()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadString()
			tbl.F_str = append(tbl.F_str, v)
			checkErr(err)
		}
	}

	tbl.F_result, err = reader.ReadBool()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_items = make([]item_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_items[i], err = PKT_item_info(reader)
			checkErr(err)
		}
	}

	tbl.F_status, err = reader.ReadBool()
	checkErr(err)

	tbl.F_time_id, err = reader.ReadS64()
	checkErr(err)

	tbl.F_time, err = reader.ReadString()
	checkErr(err)

	return
}

type npvp_mail_list struct {
	F_mail []npvp_mail
}

func (p npvp_mail_list) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_mail)))
	for k := range p.F_mail {
		p.F_mail[k].Pack(w)
	}
}

func PKT_npvp_mail_list(reader *packet.Packet) (tbl npvp_mail_list, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_mail = make([]npvp_mail, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_mail[i], err = PKT_npvp_mail(reader)
			checkErr(err)
		}
	}

	return
}

type id64 struct {
	F_id int64
}

func (p id64) Pack(w *packet.Packet) {
	w.WriteS64(p.F_id)
}

func PKT_id64(reader *packet.Packet) (tbl id64, err error) {
	tbl.F_id, err = reader.ReadS64()
	checkErr(err)

	return
}

type execute_warzone_task_success struct {
	F_team       uint8
	F_warzone_id uint32
	F_pos        uint8
	F_time       int64
}

func (p execute_warzone_task_success) Pack(w *packet.Packet) {
	w.WriteByte(p.F_team)
	w.WriteU32(p.F_warzone_id)
	w.WriteByte(p.F_pos)
	w.WriteS64(p.F_time)
}

func PKT_execute_warzone_task_success(reader *packet.Packet) (tbl execute_warzone_task_success, err error) {
	tbl.F_team, err = reader.ReadByte()
	checkErr(err)

	tbl.F_warzone_id, err = reader.ReadU32()
	checkErr(err)

	tbl.F_pos, err = reader.ReadByte()
	checkErr(err)

	tbl.F_time, err = reader.ReadS64()
	checkErr(err)

	return
}

type mail_info struct {
	F_isok  bool
	F_items item_change_info
}

func (p mail_info) Pack(w *packet.Packet) {
	w.WriteBool(p.F_isok)
	p.F_items.Pack(w)
}

func PKT_mail_info(reader *packet.Packet) (tbl mail_info, err error) {
	tbl.F_isok, err = reader.ReadBool()
	checkErr(err)

	tbl.F_items, err = PKT_item_change_info(reader)
	checkErr(err)

	return
}

type entity_array struct {
	F_tid []int32
}

func (p entity_array) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_tid)))
	for k := range p.F_tid {
		w.WriteS32(p.F_tid[k])
	}
}

func PKT_entity_array(reader *packet.Packet) (tbl entity_array, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadS32()
			tbl.F_tid = append(tbl.F_tid, v)
			checkErr(err)
		}
	}

	return
}

type all_rank_info struct {
	F_ArchivesRank          []rank_info
	F_SinkingRank           []rank_info
	F_BlowFallingRank       []rank_info
	F_DrillRank             []rank_info
	F_MySelfArchivesRank    rank_info
	F_MySelfSinkingRank     rank_info
	F_MySelfBlowFallingRank rank_info
	F_MySelfDrillRank       rank_info
}

func (p all_rank_info) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_ArchivesRank)))
	for k := range p.F_ArchivesRank {
		p.F_ArchivesRank[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_SinkingRank)))
	for k := range p.F_SinkingRank {
		p.F_SinkingRank[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_BlowFallingRank)))
	for k := range p.F_BlowFallingRank {
		p.F_BlowFallingRank[k].Pack(w)
	}
	w.WriteU16(uint16(len(p.F_DrillRank)))
	for k := range p.F_DrillRank {
		p.F_DrillRank[k].Pack(w)
	}
	p.F_MySelfArchivesRank.Pack(w)
	p.F_MySelfSinkingRank.Pack(w)
	p.F_MySelfBlowFallingRank.Pack(w)
	p.F_MySelfDrillRank.Pack(w)
}

func PKT_all_rank_info(reader *packet.Packet) (tbl all_rank_info, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_ArchivesRank = make([]rank_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_ArchivesRank[i], err = PKT_rank_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_SinkingRank = make([]rank_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_SinkingRank[i], err = PKT_rank_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_BlowFallingRank = make([]rank_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_BlowFallingRank[i], err = PKT_rank_info(reader)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_DrillRank = make([]rank_info, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_DrillRank[i], err = PKT_rank_info(reader)
			checkErr(err)
		}
	}

	tbl.F_MySelfArchivesRank, err = PKT_rank_info(reader)
	checkErr(err)

	tbl.F_MySelfSinkingRank, err = PKT_rank_info(reader)
	checkErr(err)

	tbl.F_MySelfBlowFallingRank, err = PKT_rank_info(reader)
	checkErr(err)

	tbl.F_MySelfDrillRank, err = PKT_rank_info(reader)
	checkErr(err)

	return
}

type rank_info struct {
	F_uid        uint64
	F_userName   string
	F_headIcon   uint32
	F_updateTime int64
	F_recordNum  uint32
	F_ranking    uint32
	F_rankNum    uint32
}

func (p rank_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_uid)
	w.WriteString(p.F_userName)
	w.WriteU32(p.F_headIcon)
	w.WriteS64(p.F_updateTime)
	w.WriteU32(p.F_recordNum)
	w.WriteU32(p.F_ranking)
	w.WriteU32(p.F_rankNum)
}

func PKT_rank_info(reader *packet.Packet) (tbl rank_info, err error) {
	tbl.F_uid, err = reader.ReadU64()
	checkErr(err)

	tbl.F_userName, err = reader.ReadString()
	checkErr(err)

	tbl.F_headIcon, err = reader.ReadU32()
	checkErr(err)

	tbl.F_updateTime, err = reader.ReadS64()
	checkErr(err)

	tbl.F_recordNum, err = reader.ReadU32()
	checkErr(err)

	tbl.F_ranking, err = reader.ReadU32()
	checkErr(err)

	tbl.F_rankNum, err = reader.ReadU32()
	checkErr(err)

	return
}

type team_formation struct {
	F_teamNo      uint8
	F_formationNo uint8
}

func (p team_formation) Pack(w *packet.Packet) {
	w.WriteByte(p.F_teamNo)
	w.WriteByte(p.F_formationNo)
}

func PKT_team_formation(reader *packet.Packet) (tbl team_formation, err error) {
	tbl.F_teamNo, err = reader.ReadByte()
	checkErr(err)

	tbl.F_formationNo, err = reader.ReadByte()
	checkErr(err)

	return
}

type newWeapon_fit struct {
	F_shipid  uint64
	F_weapons []weaponinfo
}

func (p newWeapon_fit) Pack(w *packet.Packet) {
	w.WriteU64(p.F_shipid)
	w.WriteU16(uint16(len(p.F_weapons)))
	for k := range p.F_weapons {
		p.F_weapons[k].Pack(w)
	}
}

func PKT_newWeapon_fit(reader *packet.Packet) (tbl newWeapon_fit, err error) {
	tbl.F_shipid, err = reader.ReadU64()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_weapons = make([]weaponinfo, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_weapons[i], err = PKT_weaponinfo(reader)
			checkErr(err)
		}
	}

	return
}

type weaponinfo struct {
	F_weaponid uint64
	F_posid    uint8
}

func (p weaponinfo) Pack(w *packet.Packet) {
	w.WriteU64(p.F_weaponid)
	w.WriteByte(p.F_posid)
}

func PKT_weaponinfo(reader *packet.Packet) (tbl weaponinfo, err error) {
	tbl.F_weaponid, err = reader.ReadU64()
	checkErr(err)

	tbl.F_posid, err = reader.ReadByte()
	checkErr(err)

	return
}

type newWeapon_info struct {
	F_weaponid   uint64
	F_weapontid  uint32
	F_weaponlock bool
}

func (p newWeapon_info) Pack(w *packet.Packet) {
	w.WriteU64(p.F_weaponid)
	w.WriteU32(p.F_weapontid)
	w.WriteBool(p.F_weaponlock)
}

func PKT_newWeapon_info(reader *packet.Packet) (tbl newWeapon_info, err error) {
	tbl.F_weaponid, err = reader.ReadU64()
	checkErr(err)

	tbl.F_weapontid, err = reader.ReadU32()
	checkErr(err)

	tbl.F_weaponlock, err = reader.ReadBool()
	checkErr(err)

	return
}

type shipRemoveWeapon struct {
	F_shipweapons []newWeapon_fit
}

func (p shipRemoveWeapon) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_shipweapons)))
	for k := range p.F_shipweapons {
		p.F_shipweapons[k].Pack(w)
	}
}

func PKT_shipRemoveWeapon(reader *packet.Packet) (tbl shipRemoveWeapon, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_shipweapons = make([]newWeapon_fit, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_shipweapons[i], err = PKT_newWeapon_fit(reader)
			checkErr(err)
		}
	}

	return
}

type weapon_refit struct {
	F_weapontid uint32
	F_weaponids []uint64
}

func (p weapon_refit) Pack(w *packet.Packet) {
	w.WriteU32(p.F_weapontid)
	w.WriteU16(uint16(len(p.F_weaponids)))
	for k := range p.F_weaponids {
		w.WriteU64(p.F_weaponids[k])
	}
}

func PKT_weapon_refit(reader *packet.Packet) (tbl weapon_refit, err error) {
	tbl.F_weapontid, err = reader.ReadU32()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadU64()
			tbl.F_weaponids = append(tbl.F_weaponids, v)
			checkErr(err)
		}
	}

	return
}

type weaponModify struct {
	F_itemchange item_change_info
	F_weapon     newWeapon_info
}

func (p weaponModify) Pack(w *packet.Packet) {
	p.F_itemchange.Pack(w)
	p.F_weapon.Pack(w)
}

func PKT_weaponModify(reader *packet.Packet) (tbl weaponModify, err error) {
	tbl.F_itemchange, err = PKT_item_change_info(reader)
	checkErr(err)

	tbl.F_weapon, err = PKT_newWeapon_info(reader)
	checkErr(err)

	return
}

type weaponship struct {
	F_shipid uint64
	F_index  uint8
}

func (p weaponship) Pack(w *packet.Packet) {
	w.WriteU64(p.F_shipid)
	w.WriteByte(p.F_index)
}

func PKT_weaponship(reader *packet.Packet) (tbl weaponship, err error) {
	tbl.F_shipid, err = reader.ReadU64()
	checkErr(err)

	tbl.F_index, err = reader.ReadByte()
	checkErr(err)

	return
}

type remove_warship struct {
	F_ids            []uint64
	F_isremoveweapon bool
}

func (p remove_warship) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_ids)))
	for k := range p.F_ids {
		w.WriteU64(p.F_ids[k])
	}
	w.WriteBool(p.F_isremoveweapon)
}

func PKT_remove_warship(reader *packet.Packet) (tbl remove_warship, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadU64()
			tbl.F_ids = append(tbl.F_ids, v)
			checkErr(err)
		}
	}

	tbl.F_isremoveweapon, err = reader.ReadBool()
	checkErr(err)

	return
}
