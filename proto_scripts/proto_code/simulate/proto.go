// Code generated by gen_proto.sh.
// DO NOT EDIT!
package main

import "misc/packet"

type null_struct struct {
}

func (p null_struct) Pack(w *packet.Packet) {
}

func PKT_null_struct(reader *packet.Packet) (tbl null_struct, err error) {
	return
}

type byte_id struct {
	F_id uint8
}

func (p byte_id) Pack(w *packet.Packet) {
	w.WriteByte(p.F_id)
}

func PKT_byte_id(reader *packet.Packet) (tbl byte_id, err error) {
	tbl.F_id, err = reader.ReadByte()
	checkErr(err)

	return
}

type auto_id struct {
	F_id int32
}

func (p auto_id) Pack(w *packet.Packet) {
	w.WriteS32(p.F_id)
}

func PKT_auto_id(reader *packet.Packet) (tbl auto_id, err error) {
	tbl.F_id, err = reader.ReadS32()
	checkErr(err)

	return
}

type entity_id struct {
	F_id uint64
}

func (p entity_id) Pack(w *packet.Packet) {
	w.WriteU64(p.F_id)
}

func PKT_entity_id(reader *packet.Packet) (tbl entity_id, err error) {
	tbl.F_id, err = reader.ReadU64()
	checkErr(err)

	return
}

type item_id struct {
	F_id uint32
}

func (p item_id) Pack(w *packet.Packet) {
	w.WriteU32(p.F_id)
}

func PKT_item_id(reader *packet.Packet) (tbl item_id, err error) {
	tbl.F_id, err = reader.ReadU32()
	checkErr(err)

	return
}

type player_cards struct {
	F_player_1 []uint16
	F_player_2 []uint16
	F_plyaer_3 []uint16
}

func (p player_cards) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_player_1)))
	for k := range p.F_player_1 {
		w.WriteU16(p.F_player_1[k])
	}
	w.WriteU16(uint16(len(p.F_player_2)))
	for k := range p.F_player_2 {
		w.WriteU16(p.F_player_2[k])
	}
	w.WriteU16(uint16(len(p.F_plyaer_3)))
	for k := range p.F_plyaer_3 {
		w.WriteU16(p.F_plyaer_3[k])
	}
}

func PKT_player_cards(reader *packet.Packet) (tbl player_cards, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadU16()
			tbl.F_player_1 = append(tbl.F_player_1, v)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadU16()
			tbl.F_player_2 = append(tbl.F_player_2, v)
			checkErr(err)
		}
	}

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadU16()
			tbl.F_plyaer_3 = append(tbl.F_plyaer_3, v)
			checkErr(err)
		}
	}

	return
}
