// Code generated by gen_proto.sh.
// DO NOT EDIT!
package main

import "misc/packet"

type null_struct struct {
}

func (p null_struct) Pack(w *packet.Packet) {
}

func PKT_null_struct(reader *packet.Packet) (tbl null_struct, err error) {
	return
}

type byte_id struct {
	F_id uint8
}

func (p byte_id) Pack(w *packet.Packet) {
	w.WriteByte(p.F_id)
}

func PKT_byte_id(reader *packet.Packet) (tbl byte_id, err error) {
	tbl.F_id, err = reader.ReadByte()
	checkErr(err)

	return
}

type auto_id struct {
	F_id int32
}

func (p auto_id) Pack(w *packet.Packet) {
	w.WriteS32(p.F_id)
}

func PKT_auto_id(reader *packet.Packet) (tbl auto_id, err error) {
	tbl.F_id, err = reader.ReadS32()
	checkErr(err)

	return
}

type entity_id struct {
	F_id string
}

func (p entity_id) Pack(w *packet.Packet) {
	w.WriteString(p.F_id)
}

func PKT_entity_id(reader *packet.Packet) (tbl entity_id, err error) {
	tbl.F_id, err = reader.ReadString()
	checkErr(err)

	return
}

type item_id struct {
	F_id uint32
}

func (p item_id) Pack(w *packet.Packet) {
	w.WriteU32(p.F_id)
}

func PKT_item_id(reader *packet.Packet) (tbl item_id, err error) {
	tbl.F_id, err = reader.ReadU32()
	checkErr(err)

	return
}

type player_card struct {
	F_hole_cards []string
	F_roomId     string
	F_players    []player
}

func (p player_card) Pack(w *packet.Packet) {
	w.WriteU16(uint16(len(p.F_hole_cards)))
	for k := range p.F_hole_cards {
		w.WriteString(p.F_hole_cards[k])
	}
	w.WriteString(p.F_roomId)
	w.WriteU16(uint16(len(p.F_players)))
	for k := range p.F_players {
		p.F_players[k].Pack(w)
	}
}

func PKT_player_card(reader *packet.Packet) (tbl player_card, err error) {
	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadString()
			tbl.F_hole_cards = append(tbl.F_hole_cards, v)
			checkErr(err)
		}
	}

	tbl.F_roomId, err = reader.ReadString()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		tbl.F_players = make([]player, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_players[i], err = PKT_player(reader)
			checkErr(err)
		}
	}

	return
}

type player struct {
	F_id    string
	F_cards []string
}

func (p player) Pack(w *packet.Packet) {
	w.WriteString(p.F_id)
	w.WriteU16(uint16(len(p.F_cards)))
	for k := range p.F_cards {
		w.WriteString(p.F_cards[k])
	}
}

func PKT_player(reader *packet.Packet) (tbl player, err error) {
	tbl.F_id, err = reader.ReadString()
	checkErr(err)

	{
		narr, err := reader.ReadU16()
		checkErr(err)

		for i := 0; i < int(narr); i++ {
			v, err := reader.ReadString()
			tbl.F_cards = append(tbl.F_cards, v)
			checkErr(err)
		}
	}

	return
}
