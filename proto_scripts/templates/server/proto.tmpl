// Code generated by gen_proto.sh.
// DO NOT EDIT!
package client_proto

import "landlords/misc/packet"
import "fmt"
import "encoding/json"
{{range .}}
type S_{{.Name}} struct { {{range $f := .Fields}}{{with Type $f.Typ}}
	F_{{$f.Name}} {{if $f.Array}}[]{{end}}{{.}}{{else}}
	F_{{$f.Name}} {{if $f.Array}}[]{{end}}S_{{$f.Typ}}{{end}}{{end}}
}

func (p S_{{.Name}}) Pack(w *packet.Packet) { {{range $f := .Fields}}{{if $f.Array}}
	w.{{Write "uint16"}}({{Type "uint16"}}(len(p.F_{{$f.Name}})))
	for k := range p.F_{{$f.Name}} { {{end}}{{with Write $f.Typ}}
	{{if $f.Array}}	{{end}}w.{{.}}(p.F_{{$f.Name}}{{if $f.Array}}[k]{{end}}){{else}}
	{{if $f.Array}}	{{end}}p.F_{{$f.Name}}{{if $f.Array}}[k]{{end}}.Pack(w){{end}}{{if $f.Array}}
	}{{end}}{{end}}
}

func PKT_{{.Name}}(data []byte) (tbl S_{{.Name}}, err error) {
	err=json.Unmarshal(data,&tbl)
	if err!=nil{
	return tbl,err
	}
	return
}

{{end}}
func checkErr(err error) {
	if err != nil {
		panic("error occured in protocol module")
	}
}

func checkMax(path string, v float64, max float64){
	if v > max {
		s := fmt.Sprintf("error range in %s, v=%g, max=%g", path, v, max)
		panic(s)
	}
}

func checkMin(path string, v float64, min float64){
	if v < min {
		s := fmt.Sprintf("error range in %s, v=%g, min=%g", path, v, min)
		panic(s)
	}
}
