// Code generated by gen_proto.sh.
// DO NOT EDIT!
package client_proto

import "app/misc/packet"
import "fmt"
import "strings"
{{range .}}
type S_{{.Name}} struct { {{range $f := .Fields}}{{with Type $f.Typ}}
	F_{{$f.Name}} {{if $f.Array}}[]{{end}}{{.}}{{else}}
	F_{{$f.Name}} {{if $f.Array}}[]{{end}}S_{{$f.Typ}}{{end}}{{end}}
}

func (p S_{{.Name}}) Pack(w *packet.Packet) { {{range $f := .Fields}}{{if $f.Array}}
	w.{{Write "uint16"}}({{Type "uint16"}}(len(p.F_{{$f.Name}})))
	for k := range p.F_{{$f.Name}} { {{end}}{{with Write $f.Typ}}
	{{if $f.Array}}	{{end}}w.{{.}}(p.F_{{$f.Name}}{{if $f.Array}}[k]{{end}}){{else}}
	{{if $f.Array}}	{{end}}p.F_{{$f.Name}}{{if $f.Array}}[k]{{end}}.Pack(w){{end}}{{if $f.Array}}
	}{{end}}{{end}}
}

func PKT_{{.Name}}(reader *packet.Packet) (tbl S_{{.Name}}, err error) {
    {{- $sname := .Name}}
    {{- range $f := .Fields}}
	{{- $ft := $f.Typ}}
	{{- if $f.Array}}
	{
		narr, err := reader.{{Read "uint16"}}()
		checkErr(err)
		{{- with Read $f.Typ}}
		for i := 0; i < int(narr); i++ {
			v, err := reader.{{.}}()
			tbl.F_{{$f.Name}} = append(tbl.F_{{$f.Name}}, v)
			checkErr(err)
		}
		{{- else}}
		tbl.F_{{$f.Name}} = make([]S_{{$f.Typ}}, narr)
		for i := 0; i < int(narr); i++ {
			tbl.F_{{$f.Name}}[i], err = PKT_{{$f.Typ}}(reader)
			checkErr(err)
		}
		{{- end}}
	}
	{{- else}}
	{{- with Read $f.Typ}}
	tbl.F_{{$f.Name}}, err = reader.{{.}}()
	checkErr(err)
	{{- if $f.CheckMinVal}}
	checkMin("{{$sname}}.{{$f.Name}}", float64(tbl.F_{{$f.Name}}), {{$f.MinVal}})
    {{- end}}
    {{- if $f.CheckMaxVal}}
    checkMax("{{$sname}}.{{$f.Name}}", float64(tbl.F_{{$f.Name}}), {{$f.MaxVal}})
    {{- end}}
	{{- if eq "string" $ft}}
	tbl.F_{{$f.Name}} = strings.TrimSpace(tbl.F_{{$f.Name}})
	{{- end}}
	{{- else}}
	tbl.F_{{$f.Name}}, err = PKT_{{$f.Typ}}(reader)
	checkErr(err)
	{{- end}}
	{{- end}}
	{{- end}}

	return
}
{{end}}
func checkErr(err error) {
	if err != nil {
		panic("error occured in protocol module")
	}
}

func checkMax(path string, v float64, max float64){
	if v > max {
		s := fmt.Sprintf("error range in %s, v=%g, max=%g", path, v, max)
		panic(s)
	}
}

func checkMin(path string, v float64, min float64){
	if v < min {
		s := fmt.Sprintf("error range in %s, v=%g, min=%g", path, v, min)
		panic(s)
	}
}
